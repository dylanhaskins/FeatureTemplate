//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>System Configuration settings for D365 - Key/Value pairs or other settings</para>
    /// <para>Display Name: System configuration</para>
    /// </summary>
    [EntityLogicalName("dia_configuration")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dia_configuration : ExtendedEntity<dia_configurationState, dia_configuration_statuscode> {
        
        public const string EntityLogicalName = "dia_configuration";
        
        public const int EntityTypeCode = 10196;
        
        public dia_configuration() : 
                base(EntityLogicalName) {
        }
        
        public dia_configuration(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dia_name");
            }
        }
        
        [AttributeLogicalName("dia_configurationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dia_configurationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Configuration</para>
        /// </summary>
        [AttributeLogicalName("dia_configurationid")]
        public Guid? dia_configurationId {
            get {
                return GetAttributeValue<Guid?>("dia_configurationid");
            }
            set {
                SetId("dia_configurationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the organization</para>
        /// <para>Display Name: Organization Id</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Encrypt Locally</para>
        /// </summary>
        [AttributeLogicalName("dia_enrcypt")]
        public bool? dia_enrcypt {
            get {
                return GetAttributeValue<bool?>("dia_enrcypt");
            }
            set {
                SetAttributeValue("dia_enrcypt", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: External configuration</para>
        /// </summary>
        [AttributeLogicalName("dia_externalconfigurationid")]
        public EntityReference dia_externalconfigurationid {
            get {
                return GetAttributeValue<EntityReference>("dia_externalconfigurationid");
            }
            set {
                SetAttributeValue("dia_externalconfigurationid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Is external configuration</para>
        /// </summary>
        [AttributeLogicalName("dia_isexternalconfiguration")]
        public bool? dia_isexternalconfiguration {
            get {
                return GetAttributeValue<bool?>("dia_isexternalconfiguration");
            }
            set {
                SetAttributeValue("dia_isexternalconfiguration", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dia_name")]
        public string dia_name {
            get {
                return GetAttributeValue<string>("dia_name");
            }
            set {
                SetAttributeValue("dia_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Source environment</para>
        /// </summary>
        [AttributeLogicalName("dia_sourceenvironment")]
        public dia_configuration_dia_sourceenvironment? dia_sourceenvironment {
            get {
                return GetOptionSetValue<dia_configuration_dia_sourceenvironment>("dia_sourceenvironment");
            }
            set {
                SetOptionSetValue("dia_sourceenvironment", value);
            }
        }
        
        /// <summary>
        /// <para>Holds the value of the key/value pair in the configuration entity</para>
        /// <para>Display Name: Value</para>
        /// </summary>
        [AttributeLogicalName("dia_value")]
        public string dia_value {
            get {
                return GetAttributeValue<string>("dia_value");
            }
            set {
                SetAttributeValue("dia_value", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Configuration</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dia_configurationState? statecode {
            get {
                return GetOptionSetValue<dia_configurationState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Configuration</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dia_configuration_statuscode? statuscode {
            get {
                return GetOptionSetValue<dia_configuration_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("dia_externalconfigurationid")]
        [RelationshipSchemaName("dia_externalconfiguration_dia_configuration_externalconfigurationid")]
        public dia_externalconfiguration dia_externalconfiguration_dia_configuration_externalconfigurationid {
            get {
                return GetRelatedEntity<dia_externalconfiguration>("dia_externalconfiguration_dia_configuration_externalconfigurationid", null);
            }
            set {
                SetRelatedEntity("dia_externalconfiguration_dia_configuration_externalconfigurationid", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dia_configuration_createdby")]
        public SystemUser lk_dia_configuration_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dia_configuration_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dia_configuration_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dia_configuration_createdonbehalfby")]
        public SystemUser lk_dia_configuration_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dia_configuration_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dia_configuration_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dia_configuration_modifiedby")]
        public SystemUser lk_dia_configuration_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dia_configuration_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dia_configuration_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dia_configuration_modifiedonbehalfby")]
        public SystemUser lk_dia_configuration_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dia_configuration_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dia_configuration_modifiedonbehalfby", null, value);
            }
        }
        
        public static dia_configuration Retrieve(IOrganizationService service, Guid id, params Expression<Func<dia_configuration,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum dia_configurationState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dia_configuration_dia_sourceenvironment {
        
        [EnumMember()]
        CBG = 100000000,
        
        [EnumMember()]
        Core = 100000001,
        
        [EnumMember()]
        Ceremonies = 100000002,
        
        [EnumMember()]
        Portal = 100000003,
    }
    
    [DataContract()]
    public enum dia_configuration_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
}

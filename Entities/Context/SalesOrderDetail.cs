//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>Line item in a order.</para>
    /// <para>Display Name: Order Item</para>
    /// </summary>
    [EntityLogicalName("salesorderdetail")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SalesOrderDetail : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "salesorderdetail";
        
        public const int EntityTypeCode = 1089;
        
        public SalesOrderDetail() : 
                base(EntityLogicalName) {
        }
        
        public SalesOrderDetail(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("salesorderdetailname");
            }
        }
        
        [AttributeLogicalName("salesorderdetailid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("salesorderdetailid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the product specified in the order.</para>
        /// <para>Display Name: Order product</para>
        /// </summary>
        [AttributeLogicalName("salesorderdetailid")]
        public Guid? SalesOrderDetailId {
            get {
                return GetAttributeValue<Guid?>("salesorderdetailid");
            }
            set {
                SetId("salesorderdetailid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total price of the order product, based on the price per unit, volume discount, and quantity.</para>
        /// <para>Display Name: Amount</para>
        /// </summary>
        [AttributeLogicalName("baseamount")]
        public decimal? BaseAmount {
            get {
                return GetMoneyValue("baseamount");
            }
            set {
                SetMoneyValue("baseamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Amount in base currency.</para>
        /// <para>Display Name: Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("baseamount_base")]
        public decimal? BaseAmount_Base {
            get {
                return GetMoneyValue("baseamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the order product, such as manufacturing details or acceptable substitutions.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due for the order product, based on the sum of the unit price, quantity, discounts, and tax.</para>
        /// <para>Display Name: Extended Amount</para>
        /// </summary>
        [AttributeLogicalName("extendedamount")]
        public decimal? ExtendedAmount {
            get {
                return GetMoneyValue("extendedamount");
            }
            set {
                SetMoneyValue("extendedamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Extended Amount in base currency.</para>
        /// <para>Display Name: Extended Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("extendedamount_base")]
        public decimal? ExtendedAmount_Base {
            get {
                return GetMoneyValue("extendedamount_base");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the invoice line item is copied from another item or data source.</para>
        /// <para>Display Name: Copied</para>
        /// </summary>
        [AttributeLogicalName("iscopied")]
        public bool? IsCopied {
            get {
                return GetAttributeValue<bool?>("iscopied");
            }
            set {
                SetAttributeValue("iscopied", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the price per unit is fixed at the value in the specified price list or can be overridden by users who have edit rights to the order product.</para>
        /// <para>Display Name: Pricing</para>
        /// </summary>
        [AttributeLogicalName("ispriceoverridden")]
        public bool? IsPriceOverridden {
            get {
                return GetAttributeValue<bool?>("ispriceoverridden");
            }
            set {
                SetAttributeValue("ispriceoverridden", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the product exists in the Microsoft Dynamics 365 product catalog or is a write-in product specific to the order.</para>
        /// <para>Display Name: Select product</para>
        /// </summary>
        [AttributeLogicalName("isproductoverridden")]
        public bool? IsProductOverridden {
            get {
                return GetAttributeValue<bool?>("isproductoverridden");
            }
            set {
                SetAttributeValue("isproductoverridden", value);
            }
        }
        
        /// <summary>
        /// <para>Type the line item number for the order product to easily identify the product in the order and make sure it's listed in the correct sequence.</para>
        /// <para>Display Name: Line Item Number</para>
        /// </summary>
        [AttributeLogicalName("lineitemnumber")]
        public int? LineItemNumber {
            get {
                return GetAttributeValue<int?>("lineitemnumber");
            }
            set {
                SetAttributeValue("lineitemnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the manual discount amount for the order product to deduct any negotiated or other savings from the product total on the order.</para>
        /// <para>Display Name: Manual Discount</para>
        /// </summary>
        [AttributeLogicalName("manualdiscountamount")]
        public decimal? ManualDiscountAmount {
            get {
                return GetMoneyValue("manualdiscountamount");
            }
            set {
                SetMoneyValue("manualdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Manual Discount in base currency.</para>
        /// <para>Display Name: Manual Discount (Base)</para>
        /// </summary>
        [AttributeLogicalName("manualdiscountamount_base")]
        public decimal? ManualDiscountAmount_Base {
            get {
                return GetMoneyValue("manualdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the parent bundle associated with this product</para>
        /// <para>Display Name: Parent Bundle</para>
        /// </summary>
        [AttributeLogicalName("parentbundleid")]
        public Guid? ParentBundleId {
            get {
                return GetAttributeValue<Guid?>("parentbundleid");
            }
            set {
                SetAttributeValue("parentbundleid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the parent bundle associated with this product</para>
        /// <para>Display Name: Parent bundle product</para>
        /// </summary>
        [AttributeLogicalName("parentbundleidref")]
        public EntityReference ParentBundleIdRef {
            get {
                return GetAttributeValue<EntityReference>("parentbundleidref");
            }
            set {
                SetAttributeValue("parentbundleidref", value);
            }
        }
        
        /// <summary>
        /// <para>Type the price per unit of the order product. The default is the value in the price list specified on the order for existing products.</para>
        /// <para>Display Name: Price per unit</para>
        /// </summary>
        [AttributeLogicalName("priceperunit")]
        public decimal? PricePerUnit {
            get {
                return GetMoneyValue("priceperunit");
            }
            set {
                SetMoneyValue("priceperunit", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Price Per Unit in base currency.</para>
        /// <para>Display Name: Price Per Unit (Base)</para>
        /// </summary>
        [AttributeLogicalName("priceperunit_base")]
        public decimal? PricePerUnit_Base {
            get {
                return GetMoneyValue("priceperunit_base");
            }
        }
        
        /// <summary>
        /// <para>Select the type of pricing error, such as a missing or invalid product, or missing quantity.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the product line item association with bundle in the sales order</para>
        /// <para>Display Name: Bundle Item Association</para>
        /// </summary>
        [AttributeLogicalName("productassociationid")]
        public Guid? ProductAssociationId {
            get {
                return GetAttributeValue<Guid?>("productassociationid");
            }
            set {
                SetAttributeValue("productassociationid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name or description to identify the type of write-in product included in the order.</para>
        /// <para>Display Name: Write-in product</para>
        /// </summary>
        [AttributeLogicalName("productdescription")]
        public string ProductDescription {
            get {
                return GetAttributeValue<string>("productdescription");
            }
            set {
                SetAttributeValue("productdescription", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the product to include on the order to link the product's pricing and other information to the parent order.</para>
        /// <para>Display Name: Existing product</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference ProductId {
            get {
                return GetAttributeValue<EntityReference>("productid");
            }
            set {
                SetAttributeValue("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Calculated field that will be populated by name and description of the product.</para>
        /// <para>Display Name: Product Name</para>
        /// </summary>
        [AttributeLogicalName("productname")]
        public string ProductName {
            get {
                return GetAttributeValue<string>("productname");
            }
            set {
                SetAttributeValue("productname", value);
            }
        }
        
        /// <summary>
        /// <para>Product Type</para>
        /// <para>Display Name: Product type</para>
        /// </summary>
        [AttributeLogicalName("producttypecode")]
        public qooiproduct_producttype? ProductTypeCode {
            get {
                return GetOptionSetValue<qooiproduct_producttype>("producttypecode");
            }
            set {
                SetOptionSetValue("producttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the property configuration.</para>
        /// <para>Display Name: Property Configuration</para>
        /// </summary>
        [AttributeLogicalName("propertyconfigurationstatus")]
        public qooiproduct_propertiesconfigurationstatus? PropertyConfigurationStatus {
            get {
                return GetOptionSetValue<qooiproduct_propertiesconfigurationstatus>("propertyconfigurationstatus");
            }
            set {
                SetOptionSetValue("propertyconfigurationstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Type the amount or quantity of the product ordered by the customer.</para>
        /// <para>Display Name: Quantity</para>
        /// </summary>
        [AttributeLogicalName("quantity")]
        public decimal? Quantity {
            get {
                return GetAttributeValue<decimal?>("quantity");
            }
            set {
                SetAttributeValue("quantity", value);
            }
        }
        
        /// <summary>
        /// <para>Type the amount or quantity of the product that is back ordered for the order.</para>
        /// <para>Display Name: Quantity Back Ordered</para>
        /// </summary>
        [AttributeLogicalName("quantitybackordered")]
        public decimal? QuantityBackordered {
            get {
                return GetAttributeValue<decimal?>("quantitybackordered");
            }
            set {
                SetAttributeValue("quantitybackordered", value);
            }
        }
        
        /// <summary>
        /// <para>Type the amount or quantity of the product that was canceled.</para>
        /// <para>Display Name: Quantity Canceled</para>
        /// </summary>
        [AttributeLogicalName("quantitycancelled")]
        public decimal? QuantityCancelled {
            get {
                return GetAttributeValue<decimal?>("quantitycancelled");
            }
            set {
                SetAttributeValue("quantitycancelled", value);
            }
        }
        
        /// <summary>
        /// <para>Type the amount or quantity of the product that was shipped for the order.</para>
        /// <para>Display Name: Quantity Shipped</para>
        /// </summary>
        [AttributeLogicalName("quantityshipped")]
        public decimal? QuantityShipped {
            get {
                return GetAttributeValue<decimal?>("quantityshipped");
            }
            set {
                SetAttributeValue("quantityshipped", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Quote Line associated with Order Line.</para>
        /// <para>Display Name: Quote Product Id</para>
        /// </summary>
        [AttributeLogicalName("quotedetailid")]
        public EntityReference QuoteDetailId {
            get {
                return GetAttributeValue<EntityReference>("quotedetailid");
            }
            set {
                SetAttributeValue("quotedetailid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the delivery date requested by the customer for the order product.</para>
        /// <para>Display Name: Requested Delivery Date</para>
        /// </summary>
        [AttributeLogicalName("requestdeliveryby")]
        public DateTime? RequestDeliveryBy {
            get {
                return GetAttributeValue<DateTime?>("requestdeliveryby");
            }
            set {
                SetAttributeValue("requestdeliveryby", value);
            }
        }
        
        /// <summary>
        /// <para>Sales Order Detail Name. Added for 1:n referential relationship (internal purposes only)</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("salesorderdetailname")]
        public string SalesOrderDetailName {
            get {
                return GetAttributeValue<string>("salesorderdetailname");
            }
            set {
                SetAttributeValue("salesorderdetailname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the order for the product. The ID is used to link product pricing and other details to the total amounts and other information on the order.</para>
        /// <para>Display Name: Order</para>
        /// </summary>
        [AttributeLogicalName("salesorderid")]
        public EntityReference SalesOrderId {
            get {
                return GetAttributeValue<EntityReference>("salesorderid");
            }
            set {
                SetAttributeValue("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether product pricing is locked for the order.</para>
        /// <para>Display Name: Order Is Price Locked</para>
        /// </summary>
        [AttributeLogicalName("salesorderispricelocked")]
        public bool? SalesOrderIsPriceLocked {
            get {
                return GetAttributeValue<bool?>("salesorderispricelocked");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the order that the order detail is associated with.</para>
        /// <para>Display Name: Order Status</para>
        /// </summary>
        [AttributeLogicalName("salesorderstatecode")]
        public Object SalesOrderStateCode {
            get {
                return GetAttributeValue<Object>("salesorderstatecode");
            }
        }
        
        /// <summary>
        /// <para>Choose the user responsible for the sale of the order product.</para>
        /// <para>Display Name: Salesperson</para>
        /// </summary>
        [AttributeLogicalName("salesrepid")]
        public EntityReference SalesRepId {
            get {
                return GetAttributeValue<EntityReference>("salesrepid");
            }
            set {
                SetAttributeValue("salesrepid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the data that maintains the sequence.</para>
        /// <para>Display Name: Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("sequencenumber")]
        public int? SequenceNumber {
            get {
                return GetAttributeValue<int?>("sequencenumber");
            }
            set {
                SetAttributeValue("sequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the shipping address.</para>
        /// <para>Display Name: Ship To Address ID</para>
        /// </summary>
        [AttributeLogicalName("shipto_addressid")]
        public Guid? ShipTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("shipto_addressid");
            }
            set {
                SetAttributeValue("shipto_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's shipping address.</para>
        /// <para>Display Name: Ship To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_contactname")]
        public string ShipTo_ContactName {
            get {
                return GetAttributeValue<string>("shipto_contactname");
            }
            set {
                SetAttributeValue("shipto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public SalesOrderDetail_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<SalesOrderDetail_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office",  to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Skip the price calculation</para>
        /// <para>Display Name: Skip Price Calculation</para>
        /// </summary>
        [AttributeLogicalName("skippricecalculation")]
        public qooidetail_skippricecalculation? SkipPriceCalculation {
            get {
                return GetOptionSetValue<qooidetail_skippricecalculation>("skippricecalculation");
            }
            set {
                SetOptionSetValue("skippricecalculation", value);
            }
        }
        
        /// <summary>
        /// <para>Type the tax amount for the order product.</para>
        /// <para>Display Name: Tax</para>
        /// </summary>
        [AttributeLogicalName("tax")]
        public decimal? Tax {
            get {
                return GetMoneyValue("tax");
            }
            set {
                SetMoneyValue("tax", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Tax in base currency.</para>
        /// <para>Display Name: Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("tax_base")]
        public decimal? Tax_Base {
            get {
                return GetMoneyValue("tax_base");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the unit of measurement for the base unit quantity for this purchase, such as each or dozen.</para>
        /// <para>Display Name: Unit</para>
        /// </summary>
        [AttributeLogicalName("uomid")]
        public EntityReference UoMId {
            get {
                return GetAttributeValue<EntityReference>("uomid");
            }
            set {
                SetAttributeValue("uomid", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows the discount amount per unit if a specified volume is purchased. Configure volume discounts in the Product Catalog in the Settings area.</para>
        /// <para>Display Name: Volume Discount</para>
        /// </summary>
        [AttributeLogicalName("volumediscountamount")]
        public decimal? VolumeDiscountAmount {
            get {
                return GetMoneyValue("volumediscountamount");
            }
        }
        
        /// <summary>
        /// <para>Value of the Volume Discount in base currency.</para>
        /// <para>Display Name: Volume Discount (Base)</para>
        /// </summary>
        [AttributeLogicalName("volumediscountamount_base")]
        public decimal? VolumeDiscountAmount_Base {
            get {
                return GetMoneyValue("volumediscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the order product should be shipped to the specified address or held until the customer calls with further pick up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Replacement certificate associated with Order Item.</para>
        /// <para>Display Name: Replacement Certificate</para>
        /// </summary>
        [AttributeLogicalName("dia_replacementcertificateid")]
        public EntityReference dia_ReplacementCertificateId {
            get {
                return GetAttributeValue<EntityReference>("dia_replacementcertificateid");
            }
            set {
                SetAttributeValue("dia_replacementcertificateid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: CBG Application</para>
        /// </summary>
        [AttributeLogicalName("dia_cbgapplicationid")]
        public EntityReference dia_cbgapplicationid {
            get {
                return GetAttributeValue<EntityReference>("dia_cbgapplicationid");
            }
            set {
                SetAttributeValue("dia_cbgapplicationid", value);
            }
        }
        
        [RelationshipSchemaName("salesorderdetail_parent_salesorderdetail", EntityRole.Referenced)]
        public IEnumerable<SalesOrderDetail> Referencedsalesorderdetail_parent_salesorderdetail {
            get {
                return GetRelatedEntities<SalesOrderDetail>("salesorderdetail_parent_salesorderdetail", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("salesorderdetail_parent_salesorderdetail", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("salesorderdetail_parentref_salesorderdetail", EntityRole.Referenced)]
        public IEnumerable<SalesOrderDetail> Referencedsalesorderdetail_parentref_salesorderdetail {
            get {
                return GetRelatedEntities<SalesOrderDetail>("salesorderdetail_parentref_salesorderdetail", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("salesorderdetail_parentref_salesorderdetail", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentbundleid")]
        [RelationshipSchemaName("salesorderdetail_parent_salesorderdetail", EntityRole.Referencing)]
        public SalesOrderDetail Referencingsalesorderdetail_parent_salesorderdetail {
            get {
                return GetRelatedEntity<SalesOrderDetail>("salesorderdetail_parent_salesorderdetail", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("salesorderdetail_parent_salesorderdetail", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentbundleidref")]
        [RelationshipSchemaName("salesorderdetail_parentref_salesorderdetail", EntityRole.Referencing)]
        public SalesOrderDetail Referencingsalesorderdetail_parentref_salesorderdetail {
            get {
                return GetRelatedEntity<SalesOrderDetail>("salesorderdetail_parentref_salesorderdetail", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("salesorderdetail_parentref_salesorderdetail", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_salesorderdetail_createdonbehalfby")]
        public SystemUser lk_salesorderdetail_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderdetail_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderdetail_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_salesorderdetail_modifiedonbehalfby")]
        public SystemUser lk_salesorderdetail_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderdetail_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderdetail_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_salesorderdetailbase_createdby")]
        public SystemUser lk_salesorderdetailbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderdetailbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderdetailbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_salesorderdetailbase_modifiedby")]
        public SystemUser lk_salesorderdetailbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderdetailbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderdetailbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("salesorderid")]
        [RelationshipSchemaName("order_details")]
        public SalesOrder order_details {
            get {
                return GetRelatedEntity<SalesOrder>("order_details", null);
            }
            set {
                SetRelatedEntity("order_details", null, value);
            }
        }
        
        [AttributeLogicalName("productid")]
        [RelationshipSchemaName("product_order_details")]
        public Product product_order_details {
            get {
                return GetRelatedEntity<Product>("product_order_details", null);
            }
            set {
                SetRelatedEntity("product_order_details", null, value);
            }
        }
        
        [AttributeLogicalName("salesrepid")]
        [RelationshipSchemaName("system_user_salesorderdetail")]
        public SystemUser system_user_salesorderdetail {
            get {
                return GetRelatedEntity<SystemUser>("system_user_salesorderdetail", null);
            }
            set {
                SetRelatedEntity("system_user_salesorderdetail", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_salesorderdetail")]
        public Team team_salesorderdetail {
            get {
                return GetRelatedEntity<Team>("team_salesorderdetail", null);
            }
            set {
                SetRelatedEntity("team_salesorderdetail", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_salesorderdetail")]
        public SystemUser user_salesorderdetail {
            get {
                return GetRelatedEntity<SystemUser>("user_salesorderdetail", null);
            }
            set {
                SetRelatedEntity("user_salesorderdetail", null, value);
            }
        }
        
        public static SalesOrderDetail Retrieve(IOrganizationService service, Guid id, params Expression<Func<SalesOrderDetail,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum SalesOrderDetail_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>Display Name: Service request</para>
    /// </summary>
    [EntityLogicalName("incident")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Incident : ExtendedEntity<IncidentState, Incident_StatusCode> {
        
        public const string EntityLogicalName = "incident";
        
        public const int EntityTypeCode = 112;
        
        public Incident() : 
                base(EntityLogicalName) {
        }
        
        public Incident(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("incidentid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the service request.</para>
        /// <para>Display Name: Service Request</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public Guid? IncidentId {
            get {
                return GetAttributeValue<Guid?>("incidentid");
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the case is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Activities Complete</para>
        /// </summary>
        [AttributeLogicalName("activitiescomplete")]
        public bool? ActivitiesComplete {
            get {
                return GetAttributeValue<bool?>("activitiescomplete");
            }
            set {
                SetAttributeValue("activitiescomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were actually required to resolve the service request.</para>
        /// <para>Display Name: Actual Service Units</para>
        /// </summary>
        [AttributeLogicalName("actualserviceunits")]
        public int? ActualServiceUnits {
            get {
                return GetAttributeValue<int?>("actualserviceunits");
            }
            set {
                SetAttributeValue("actualserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were billed to the customer for the service request.</para>
        /// <para>Display Name: Billed Service Units</para>
        /// </summary>
        [AttributeLogicalName("billedserviceunits")]
        public int? BilledServiceUnits {
            get {
                return GetAttributeValue<int?>("billedserviceunits");
            }
            set {
                SetAttributeValue("billedserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>Details whether the profile is blocked or not.</para>
        /// <para>Display Name: Blocked Profile</para>
        /// </summary>
        [AttributeLogicalName("blockedprofile")]
        public bool? BlockedProfile {
            get {
                return GetAttributeValue<bool?>("blockedprofile");
            }
            set {
                SetAttributeValue("blockedprofile", value);
            }
        }
        
        /// <summary>
        /// <para>Select how contact about the service request was originated, such as email, phone, or web, for use in reporting and analysis.</para>
        /// <para>Display Name: Access channel</para>
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public incident_caseorigincode? CaseOriginCode {
            get {
                return GetOptionSetValue<incident_caseorigincode>("caseorigincode");
            }
            set {
                SetOptionSetValue("caseorigincode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of service request to identify the incident for use in service request routing and analysis.</para>
        /// <para>Display Name: Service request type</para>
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public Incident_CaseTypeCode? CaseTypeCode {
            get {
                return GetOptionSetValue<Incident_CaseTypeCode>("casetypecode");
            }
            set {
                SetOptionSetValue("casetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Check Email</para>
        /// </summary>
        [AttributeLogicalName("checkemail")]
        public bool? CheckEmail {
            get {
                return GetAttributeValue<bool?>("checkemail");
            }
            set {
                SetAttributeValue("checkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the case.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Choose the contract line that the service request should be logged under to make sure the customer is charged correctly.</para>
        /// <para>Display Name: Contract Line</para>
        /// </summary>
        [AttributeLogicalName("contractdetailid")]
        public EntityReference ContractDetailId {
            get {
                return GetAttributeValue<EntityReference>("contractdetailid");
            }
            set {
                SetAttributeValue("contractdetailid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service contract that the service request should be logged under to make sure the customer is eligible for support services.</para>
        /// <para>Display Name: Contract</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public EntityReference ContractId {
            get {
                return GetAttributeValue<EntityReference>("contractid");
            }
            set {
                SetAttributeValue("contractid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the service level for the service request to make sure the service request is handled correctly.</para>
        /// <para>Display Name: Service Level</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public Incident_ContractServiceLevelCode? ContractServiceLevelCode {
            get {
                return GetOptionSetValue<Incident_ContractServiceLevelCode>("contractservicelevelcode");
            }
            set {
                SetOptionSetValue("contractservicelevelcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created on</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Tells whether customer service representative has contacted the customer or not.</para>
        /// <para>Display Name: Customer Contacted</para>
        /// </summary>
        [AttributeLogicalName("customercontacted")]
        public bool? CustomerContacted {
            get {
                return GetAttributeValue<bool?>("customercontacted");
            }
            set {
                SetAttributeValue("customercontacted", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer organisation or person to provide a quick link to additional customer details, such as organisation information, activities, and opportunities.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer's level of satisfaction with the handling and resolution of the service request.</para>
        /// <para>Display Name: Satisfaction</para>
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public Incident_CustomerSatisfactionCode? CustomerSatisfactionCode {
            get {
                return GetOptionSetValue<Incident_CustomerSatisfactionCode>("customersatisfactioncode");
            }
            set {
                SetOptionSetValue("customersatisfactioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether terms of the associated entitlement should be decremented or not.</para>
        /// <para>Display Name: Decrement Entitlement Terms</para>
        /// </summary>
        [AttributeLogicalName("decremententitlementterm")]
        public bool? DecrementEntitlementTerm {
            get {
                return GetAttributeValue<bool?>("decremententitlementterm");
            }
            set {
                SetAttributeValue("decremententitlementterm", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the service request to assist the service team in reaching a resolution.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The primary email address for the entity.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the entitlement that is applicable for the service request.</para>
        /// <para>Display Name: Entitlement</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public EntityReference EntitlementId {
            get {
                return GetAttributeValue<EntityReference>("entitlementid");
            }
            set {
                SetAttributeValue("entitlementid", value);
            }
        }
        
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Indicates the date and time when the service request was escalated.</para>
        /// <para>Display Name: Escalated On</para>
        /// </summary>
        [AttributeLogicalName("escalatedon")]
        public DateTime? EscalatedOn {
            get {
                return GetAttributeValue<DateTime?>("escalatedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select an existing case for the customer that has been populated. For internal use only.</para>
        /// <para>Display Name: Existing Case</para>
        /// </summary>
        [AttributeLogicalName("existingcase")]
        public EntityReference ExistingCase {
            get {
                return GetAttributeValue<EntityReference>("existingcase");
            }
            set {
                SetAttributeValue("existingcase", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: First Response By KPI</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiid")]
        public EntityReference FirstResponseByKPIId {
            get {
                return GetAttributeValue<EntityReference>("firstresponsebykpiid");
            }
            set {
                SetAttributeValue("firstresponsebykpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the initial response time for the service request according to the terms of the SLA.</para>
        /// <para>Display Name: First Response SLA Status</para>
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public Incident_FirstResponseSLAStatus? FirstResponseSLAStatus {
            get {
                return GetOptionSetValue<Incident_FirstResponseSLAStatus>("firstresponseslastatus");
            }
            set {
                SetOptionSetValue("firstresponseslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the first response has been sent.</para>
        /// <para>Display Name: First Response Sent</para>
        /// </summary>
        [AttributeLogicalName("firstresponsesent")]
        public bool? FirstResponseSent {
            get {
                return GetAttributeValue<bool?>("firstresponsesent");
            }
            set {
                SetAttributeValue("firstresponsesent", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Follow up Task Created</para>
        /// </summary>
        [AttributeLogicalName("followuptaskcreated")]
        public bool? FollowUpTaskCreated {
            get {
                return GetAttributeValue<bool?>("followuptaskcreated");
            }
            set {
                SetAttributeValue("followuptaskcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by which a customer service representative has to follow up with the customer on this service request.</para>
        /// <para>Display Name: Follow Up By</para>
        /// </summary>
        [AttributeLogicalName("followupby")]
        public DateTime? FollowupBy {
            get {
                return GetAttributeValue<DateTime?>("followupby");
            }
            set {
                SetAttributeValue("followupby", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the current stage of the service process for the service request to assist service team members when they review or transfer a service request.</para>
        /// <para>Display Name: Service Request Stage</para>
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public Incident_IncidentStageCode? IncidentStageCode {
            get {
                return GetOptionSetValue<Incident_IncidentStageCode>("incidentstagecode");
            }
            set {
                SetOptionSetValue("incidentstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Will contain the Influencer score coming from NetBreeze.</para>
        /// <para>Display Name: Influence Score</para>
        /// </summary>
        [AttributeLogicalName("influencescore")]
        public double? InfluenceScore {
            get {
                return GetAttributeValue<double?>("influencescore");
            }
            set {
                SetAttributeValue("influencescore", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Decrementing</para>
        /// </summary>
        [AttributeLogicalName("isdecrementing")]
        public bool? IsDecrementing {
            get {
                return GetAttributeValue<bool?>("isdecrementing");
            }
            set {
                SetAttributeValue("isdecrementing", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the service request has been escalated.</para>
        /// <para>Display Name: Is Escalated</para>
        /// </summary>
        [AttributeLogicalName("isescalated")]
        public bool? IsEscalated {
            get {
                return GetAttributeValue<bool?>("isescalated");
            }
            set {
                SetAttributeValue("isescalated", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the article that contains additional information or a resolution for the service request, for reference during research or follow up with the customer.</para>
        /// <para>Display Name: Knowledge Base Article</para>
        /// </summary>
        [AttributeLogicalName("kbarticleid")]
        public EntityReference KbArticleId {
            get {
                return GetAttributeValue<EntityReference>("kbarticleid");
            }
            set {
                SetAttributeValue("kbarticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary service request the current service request was merged into.</para>
        /// <para>Display Name: Master Service Request</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
            set {
                SetAttributeValue("masterid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been merged with another incident.</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the post originated as a public or private message.</para>
        /// <para>Display Name: Received As</para>
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public socialactivity_postmessagetype? MessageTypeCode {
            get {
                return GetOptionSetValue<socialactivity_postmessagetype>("messagetypecode");
            }
            set {
                SetOptionSetValue("messagetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Number of child incidents associated with the incident.</para>
        /// <para>Display Name: Child Cases</para>
        /// </summary>
        [AttributeLogicalName("numberofchildincidents")]
        public int? NumberOfChildIncidents {
            get {
                return GetAttributeValue<int?>("numberofchildincidents");
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the service request was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the parent service request for a service request.</para>
        /// <para>Display Name: Parent Service Request</para>
        /// </summary>
        [AttributeLogicalName("parentcaseid")]
        public EntityReference ParentCaseId {
            get {
                return GetAttributeValue<EntityReference>("parentcaseid");
            }
            set {
                SetAttributeValue("parentcaseid", value);
            }
        }
        
        /// <summary>
        /// <para>Select a primary person for this service request.</para>
        /// <para>Display Name: ZZZContact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Incident_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Incident_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the process associated with the entity.</para>
        /// <para>Display Name: Process Id</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the product associated with the service request to identify warranty, service, or other product issues and be able to report the number of incidents for each product.</para>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference ProductId {
            get {
                return GetAttributeValue<EntityReference>("productid");
            }
            set {
                SetAttributeValue("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the serial number of the product that is associated with this service request, so that the number of service requests per product can be reported.</para>
        /// <para>Display Name: Serial Number</para>
        /// </summary>
        [AttributeLogicalName("productserialnumber")]
        public string ProductSerialNumber {
            get {
                return GetAttributeValue<string>("productserialnumber");
            }
            set {
                SetAttributeValue("productserialnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by when the service request must be resolved.</para>
        /// <para>Display Name: Resolve By</para>
        /// </summary>
        [AttributeLogicalName("resolveby")]
        public DateTime? ResolveBy {
            get {
                return GetAttributeValue<DateTime?>("resolveby");
            }
            set {
                SetAttributeValue("resolveby", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Resolve By KPI</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiid")]
        public EntityReference ResolveByKPIId {
            get {
                return GetAttributeValue<EntityReference>("resolvebykpiid");
            }
            set {
                SetAttributeValue("resolvebykpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the resolution time for the service request according to the terms of the SLA.</para>
        /// <para>Display Name: Resolve By SLA Status</para>
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public Incident_ResolveBySLAStatus? ResolveBySLAStatus {
            get {
                return GetOptionSetValue<Incident_ResolveBySLAStatus>("resolvebyslastatus");
            }
            set {
                SetOptionSetValue("resolvebyslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: First Response By</para>
        /// </summary>
        [AttributeLogicalName("responseby")]
        public DateTime? ResponseBy {
            get {
                return GetAttributeValue<DateTime?>("responseby");
            }
            set {
                SetAttributeValue("responseby", value);
            }
        }
        
        /// <summary>
        /// <para>Choose an additional customer person who can also help resolve the service request.</para>
        /// <para>Display Name: Requestor</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactid")]
        public EntityReference ResponsibleContactId {
            get {
                return GetAttributeValue<EntityReference>("responsiblecontactid");
            }
            set {
                SetAttributeValue("responsiblecontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been routed to queue or not.</para>
        /// <para>Display Name: Route Service Request</para>
        /// </summary>
        [AttributeLogicalName("routecase")]
        public bool? RouteCase {
            get {
                return GetAttributeValue<bool?>("routecase");
            }
            set {
                SetAttributeValue("routecase", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the service request record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
        /// <para>Display Name: Sentiment Value</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? SentimentValue {
            get {
                return GetAttributeValue<double?>("sentimentvalue");
            }
            set {
                SetAttributeValue("sentimentvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Select the stage, in the service request resolution process, that the service request is in.</para>
        /// <para>Display Name: Service Stage</para>
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public servicestage? ServiceStage {
            get {
                return GetOptionSetValue<servicestage>("servicestage");
            }
            set {
                SetOptionSetValue("servicestage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the severity of this service request to indicate the incident's impact on the customer's business.</para>
        /// <para>Display Name: Severity</para>
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public Incident_SeverityCode? SeverityCode {
            get {
                return GetOptionSetValue<Incident_SeverityCode>("severitycode");
            }
            set {
                SetOptionSetValue("severitycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the social profile with which the service request is associated.</para>
        /// <para>Display Name: Social Profile</para>
        /// </summary>
        [AttributeLogicalName("socialprofileid")]
        public EntityReference SocialProfileId {
            get {
                return GetAttributeValue<EntityReference>("socialprofileid");
            }
            set {
                SetAttributeValue("socialprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the stage where the entity is located.</para>
        /// <para>Display Name: (Deprecated) Stage Id</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the service request is active, resolved, or canceled. Resolved and canceled service requests are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public IncidentState? StateCode {
            get {
                return GetOptionSetValue<IncidentState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the service request's status.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Incident_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Incident_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the subject for the service request, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId {
            get {
                return GetAttributeValue<EntityReference>("subjectid");
            }
            set {
                SetAttributeValue("subjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the service request number for customer reference and searching capabilities. This cannot be modified.</para>
        /// <para>Display Name: Service Request Number</para>
        /// </summary>
        [AttributeLogicalName("ticketnumber")]
        public string TicketNumber {
            get {
                return GetAttributeValue<string>("ticketnumber");
            }
            set {
                SetAttributeValue("ticketnumber", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the request, issue, or company name, to identify the service request in Microsoft Dynamics 365 views.</para>
        /// <para>Display Name: Service request ID</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Date received</para>
        /// </summary>
        [AttributeLogicalName("dia_datereceived")]
        public DateTime? dia_Datereceived {
            get {
                return GetAttributeValue<DateTime?>("dia_datereceived");
            }
            set {
                SetAttributeValue("dia_datereceived", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Date submitted</para>
        /// </summary>
        [AttributeLogicalName("dia_datesubmitted")]
        public DateTime? dia_Datesubmitted {
            get {
                return GetAttributeValue<DateTime?>("dia_datesubmitted");
            }
            set {
                SetAttributeValue("dia_datesubmitted", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Migrated</para>
        /// </summary>
        [AttributeLogicalName("dia_migrated")]
        public bool? dia_Migrated {
            get {
                return GetAttributeValue<bool?>("dia_migrated");
            }
            set {
                SetAttributeValue("dia_migrated", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Migrated application number</para>
        /// </summary>
        [AttributeLogicalName("dia_migratedapplicationnumber")]
        public string dia_Migratedapplicationnumber {
            get {
                return GetAttributeValue<string>("dia_migratedapplicationnumber");
            }
            set {
                SetAttributeValue("dia_migratedapplicationnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Migrated xref number</para>
        /// </summary>
        [AttributeLogicalName("dia_migratedxrefnumber")]
        public string dia_Migratedxrefnumber {
            get {
                return GetAttributeValue<string>("dia_migratedxrefnumber");
            }
            set {
                SetAttributeValue("dia_migratedxrefnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: K2 serial number</para>
        /// </summary>
        [AttributeLogicalName("dia_k2serialnumber")]
        public string dia_k2serialnumber {
            get {
                return GetAttributeValue<string>("dia_k2serialnumber");
            }
            set {
                SetAttributeValue("dia_k2serialnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Portal Origin</para>
        /// </summary>
        [AttributeLogicalName("diap_portalorigin")]
        public bool? diap_PortalOrigin {
            get {
                return GetAttributeValue<bool?>("diap_portalorigin");
            }
            set {
                SetAttributeValue("diap_portalorigin", value);
            }
        }
        
        [RelationshipSchemaName("Incident_Emails")]
        public IEnumerable<Email> Incident_Emails {
            get {
                return GetRelatedEntities<Email>("Incident_Emails", null);
            }
            set {
                SetRelatedEntities("Incident_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_existingcase {
            get {
                return GetRelatedEntities<Incident>("incident_existingcase", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_existingcase", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_master_incident {
            get {
                return GetRelatedEntities<Incident>("incident_master_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_master_incident", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_parent_incident {
            get {
                return GetRelatedEntities<Incident>("incident_parent_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_parent_incident", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("existingcase")]
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referencing)]
        public Incident Referencingincident_existingcase {
            get {
                return GetRelatedEntity<Incident>("incident_existingcase", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_existingcase", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referencing)]
        public Incident Referencingincident_master_incident {
            get {
                return GetRelatedEntity<Incident>("incident_master_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_master_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentcaseid")]
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referencing)]
        public Incident Referencingincident_parent_incident {
            get {
                return GetRelatedEntity<Incident>("incident_parent_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_parent_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_incidents")]
        public BusinessUnit business_unit_incidents {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_incidents", null);
            }
            set {
                SetRelatedEntity("business_unit_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("dia_incident_salesorder_servicerequestid")]
        public IEnumerable<SalesOrder> dia_incident_salesorder_servicerequestid {
            get {
                return GetRelatedEntities<SalesOrder>("dia_incident_salesorder_servicerequestid", null);
            }
            set {
                SetRelatedEntities("dia_incident_salesorder_servicerequestid", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_activity_parties")]
        public IEnumerable<ActivityParty> incident_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntities("incident_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_incidentbase_createdby")]
        public SystemUser lk_incidentbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_createdonbehalfby")]
        public SystemUser lk_incidentbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedby")]
        public SystemUser lk_incidentbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedonbehalfby")]
        public SystemUser lk_incidentbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("productid")]
        [RelationshipSchemaName("product_incidents")]
        public Product product_incidents {
            get {
                return GetRelatedEntity<Product>("product_incidents", null);
            }
            set {
                SetRelatedEntity("product_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_incidents")]
        public SystemUser system_user_incidents {
            get {
                return GetRelatedEntity<SystemUser>("system_user_incidents", null);
            }
            set {
                SetRelatedEntity("system_user_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_incidents")]
        public Team team_incidents {
            get {
                return GetRelatedEntity<Team>("team_incidents", null);
            }
            set {
                SetRelatedEntity("team_incidents", null, value);
            }
        }
        
        public static Incident Retrieve(IOrganizationService service, Guid id, params Expression<Func<Incident,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'Migrated application number'</para>
        /// </summary>
        public static Incident Retrieve_dia_migratedapplicationnumber(IOrganizationService service, string dia_Migratedapplicationnumber, params Expression<Func<Incident,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("dia_migratedapplicationnumber", dia_Migratedapplicationnumber);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'Migrated application number'</para>
        /// </summary>
        public void AltKey_dia_migratedapplicationnumber(string dia_Migratedapplicationnumber) {
            KeyAttributes.Clear();
            KeyAttributes.Add("dia_migratedapplicationnumber", dia_Migratedapplicationnumber);
        }
    }
    
    [DataContract()]
    public enum Incident_StatusCode {
        
        [EnumMember()]
        Inprogress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        Draft = 3,
        
        [EnumMember()]
        Completed_2 = 5,
        
        [EnumMember()]
        Cancelled = 6,
        
        [EnumMember()]
        Merged = 2000,
        
        [EnumMember()]
        Submitted = 100000002,
        
        [EnumMember()]
        Migrated = 100000003,
        
        [EnumMember()]
        Completed = 100000004,
    }
    
    [DataContract()]
    public enum Incident_FirstResponseSLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum Incident_ContractServiceLevelCode {
        
        [EnumMember()]
        Gold = 1,
        
        [EnumMember()]
        Silver = 2,
        
        [EnumMember()]
        Bronze = 3,
    }
    
    [DataContract()]
    public enum Incident_CaseTypeCode {
        
        [EnumMember()]
        Individual = 1,
        
        [EnumMember()]
        Group = 2,
    }
    
    [DataContract()]
    public enum Incident_SeverityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_ResolveBySLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum Incident_CustomerSatisfactionCode {
        
        [EnumMember()]
        VeryDissatisfied = 1,
        
        [EnumMember()]
        Dissatisfied = 2,
        
        [EnumMember()]
        Neutral = 3,
        
        [EnumMember()]
        Satisfied = 4,
        
        [EnumMember()]
        VerySatisfied = 5,
    }
    
    [DataContract()]
    public enum IncidentState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Resolved = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Incident_IncidentStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_PriorityCode {
        
        [EnumMember()]
        High = 1,
        
        [EnumMember()]
        Normal = 2,
        
        [EnumMember()]
        Low = 3,
    }
}

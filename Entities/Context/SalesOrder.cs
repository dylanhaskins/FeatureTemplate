//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>A payment order from the Portal or payment processed in Infinity</para>
    /// <para>Display Name: Order</para>
    /// </summary>
    [EntityLogicalName("salesorder")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SalesOrder : ExtendedEntity<SalesOrderState, SalesOrder_StatusCode> {
        
        public const string EntityLogicalName = "salesorder";
        
        public const int EntityTypeCode = 1088;
        
        public SalesOrder() : 
                base(EntityLogicalName) {
        }
        
        public SalesOrder(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("salesorderid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the order.</para>
        /// <para>Display Name: Order</para>
        /// </summary>
        [AttributeLogicalName("salesorderid")]
        public Guid? SalesOrderId {
            get {
                return GetAttributeValue<Guid?>("salesorderid");
            }
            set {
                SetId("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account related to the record. This information is used to link the sales order to the account selected in the Customer field for reporting and analytics.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the billing address.</para>
        /// <para>Display Name: Bill To Address ID</para>
        /// </summary>
        [AttributeLogicalName("billto_addressid")]
        public Guid? BillTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("billto_addressid");
            }
            set {
                SetAttributeValue("billto_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's billing address.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("billto_city")]
        public string BillTo_City {
            get {
                return GetAttributeValue<string>("billto_city");
            }
            set {
                SetAttributeValue("billto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Bill To address.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billto_composite")]
        public string BillTo_Composite {
            get {
                return GetAttributeValue<string>("billto_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's billing address.</para>
        /// <para>Display Name: Bill To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("billto_contactname")]
        public string BillTo_ContactName {
            get {
                return GetAttributeValue<string>("billto_contactname");
            }
            set {
                SetAttributeValue("billto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's billing address.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("billto_country")]
        public string BillTo_Country {
            get {
                return GetAttributeValue<string>("billto_country");
            }
            set {
                SetAttributeValue("billto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Fax</para>
        /// </summary>
        [AttributeLogicalName("billto_fax")]
        public string BillTo_Fax {
            get {
                return GetAttributeValue<string>("billto_fax");
            }
            set {
                SetAttributeValue("billto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("billto_line1")]
        public string BillTo_Line1 {
            get {
                return GetAttributeValue<string>("billto_line1");
            }
            set {
                SetAttributeValue("billto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("billto_line2")]
        public string BillTo_Line2 {
            get {
                return GetAttributeValue<string>("billto_line2");
            }
            set {
                SetAttributeValue("billto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the billing address.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("billto_line3")]
        public string BillTo_Line3 {
            get {
                return GetAttributeValue<string>("billto_line3");
            }
            set {
                SetAttributeValue("billto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Bill To Name</para>
        /// </summary>
        [AttributeLogicalName("billto_name")]
        public string BillTo_Name {
            get {
                return GetAttributeValue<string>("billto_name");
            }
            set {
                SetAttributeValue("billto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the billing address.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("billto_postalcode")]
        public string BillTo_PostalCode {
            get {
                return GetAttributeValue<string>("billto_postalcode");
            }
            set {
                SetAttributeValue("billto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the billing address.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("billto_stateorprovince")]
        public string BillTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("billto_stateorprovince");
            }
            set {
                SetAttributeValue("billto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Phone</para>
        /// </summary>
        [AttributeLogicalName("billto_telephone")]
        public string BillTo_Telephone {
            get {
                return GetAttributeValue<string>("billto_telephone");
            }
            set {
                SetAttributeValue("billto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the campaign that the order was created from.</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the parent contact related to the record. This information is used to link the contract to the contact selected in the Customer field for reporting and analytics.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Requestor</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date that all or part of the order was shipped to the customer.</para>
        /// <para>Display Name: Date fulfilled</para>
        /// </summary>
        [AttributeLogicalName("datefulfilled")]
        public DateTime? DateFulfilled {
            get {
                return GetAttributeValue<DateTime?>("datefulfilled");
            }
            set {
                SetAttributeValue("datefulfilled", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the order, such as the products or services offered or details about the customer's product preferences.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the order if the customer is eligible for special savings.</para>
        /// <para>Display Name: Order Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Order Discount Amount in base currency.</para>
        /// <para>Display Name: Order Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Detail Amount field to include additional savings for the customer in the order.</para>
        /// <para>Display Name: Order Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>The primary email address for the entity.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the order for use in calculating the Total Amount field.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Freight Amount in base currency.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping charges are processed correctly.</para>
        /// <para>Display Name: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("freighttermscode")]
        public SalesOrder_FreightTermsCode? FreightTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_FreightTermsCode>("freighttermscode");
            }
            set {
                SetOptionSetValue("freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether prices specified on the invoice are locked from any further updates.</para>
        /// <para>Display Name: Prices Locked</para>
        /// </summary>
        [AttributeLogicalName("ispricelocked")]
        public bool? IsPriceLocked {
            get {
                return GetAttributeValue<bool?>("ispricelocked");
            }
            set {
                SetAttributeValue("ispricelocked", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the order was last submitted to an accounting or ERP system for processing.</para>
        /// <para>Display Name: Last Submitted to Back Office</para>
        /// </summary>
        [AttributeLogicalName("lastbackofficesubmit")]
        public DateTime? LastBackofficeSubmit {
            get {
                return GetAttributeValue<DateTime?>("lastbackofficesubmit");
            }
            set {
                SetAttributeValue("lastbackofficesubmit", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the order.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the order was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Choose the related opportunity so that the data for the order and opportunity are linked for reporting and analytics.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the order number for customer reference and to use in search. The number cannot be modified.</para>
        /// <para>Display Name: Order ID</para>
        /// </summary>
        [AttributeLogicalName("ordernumber")]
        public string OrderNumber {
            get {
                return GetAttributeValue<string>("ordernumber");
            }
            set {
                SetAttributeValue("ordernumber", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public SalesOrder_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price list</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of pricing error, such as a missing or invalid product, or missing quantity.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public SalesOrder_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<SalesOrder_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the process associated with the entity.</para>
        /// <para>Display Name: Process Id</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the related quote so that order data and quote data are linked for reporting and analytics.</para>
        /// <para>Display Name: Quote</para>
        /// </summary>
        [AttributeLogicalName("quoteid")]
        public EntityReference QuoteId {
            get {
                return GetAttributeValue<EntityReference>("quoteid");
            }
            set {
                SetAttributeValue("quoteid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the delivery date requested by the customer for all products in the order.</para>
        /// <para>Display Name: Requested Delivery Date</para>
        /// </summary>
        [AttributeLogicalName("requestdeliveryby")]
        public DateTime? RequestDeliveryBy {
            get {
                return GetAttributeValue<DateTime?>("requestdeliveryby");
            }
            set {
                SetAttributeValue("requestdeliveryby", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the sales order record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this sales order. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the shipping address.</para>
        /// <para>Display Name: Ship To Address ID</para>
        /// </summary>
        [AttributeLogicalName("shipto_addressid")]
        public Guid? ShipTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("shipto_addressid");
            }
            set {
                SetAttributeValue("shipto_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Ship To address.</para>
        /// <para>Display Name: Ship To Address</para>
        /// </summary>
        [AttributeLogicalName("shipto_composite")]
        public string ShipTo_Composite {
            get {
                return GetAttributeValue<string>("shipto_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's shipping address.</para>
        /// <para>Display Name: Ship To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_contactname")]
        public string ShipTo_ContactName {
            get {
                return GetAttributeValue<string>("shipto_contactname");
            }
            set {
                SetAttributeValue("shipto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship to Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Ship To Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public SalesOrder_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office",  to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public SalesOrder_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<SalesOrder_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Skip Price Calculation</para>
        /// <para>Display Name: Skip Price Calculation (For Internal Use)</para>
        /// </summary>
        [AttributeLogicalName("skippricecalculation")]
        public qooi_skippricecalculation? SkipPriceCalculation {
            get {
                return GetOptionSetValue<qooi_skippricecalculation>("skippricecalculation");
            }
            set {
                SetOptionSetValue("skippricecalculation", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the stage where the entity is located.</para>
        /// <para>Display Name: (Deprecated) Stage Id</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the order is active, submitted, fulfilled, canceled, or invoiced. Only active orders can be edited.</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SalesOrderState? StateCode {
            get {
                return GetOptionSetValue<SalesOrderState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the order's status.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SalesOrder_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SalesOrder_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the order was submitted to the fulfillment or shipping center.</para>
        /// <para>Display Name: Date Submitted</para>
        /// </summary>
        [AttributeLogicalName("submitdate")]
        public DateTime? SubmitDate {
            get {
                return GetAttributeValue<DateTime?>("submitdate");
            }
            set {
                SetAttributeValue("submitdate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the code for the submitted status in the fulfillment or shipping center system.</para>
        /// <para>Display Name: Submitted Status</para>
        /// </summary>
        [AttributeLogicalName("submitstatus")]
        public int? SubmitStatus {
            get {
                return GetAttributeValue<int?>("submitstatus");
            }
            set {
                SetAttributeValue("submitstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional details or notes about the order for the fulfillment or shipping center.</para>
        /// <para>Display Name: Submitted Status Description</para>
        /// </summary>
        [AttributeLogicalName("submitstatusdescription")]
        public string SubmitStatusDescription {
            get {
                return GetAttributeValue<string>("submitstatusdescription");
            }
            set {
                SetAttributeValue("submitstatusdescription", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the order.</para>
        /// <para>Display Name: Total amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount for the order, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the order.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Pre-Freight Amount in base currency.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Amount in base currency.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the order.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Discount Amount in base currency.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the order, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Detail Amount in base currency.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the order. This value is reflected in the Detail Amount field on the order and is added to any discount amount or rate specified on the order.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Line Item Discount Amount in base currency.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the Tax amounts specified on all products included in the order, included in the Total Amount due calculation for the order.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Total Tax in base currency.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Select whether the products included in the order should be shipped to the specified address or held until the customer calls with further pick-up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Amount</para>
        /// </summary>
        [AttributeLogicalName("dia_infinityamount")]
        public decimal? dia_InfinityAmount {
            get {
                return GetMoneyValue("dia_infinityamount");
            }
            set {
                SetMoneyValue("dia_infinityamount", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Payment method</para>
        /// </summary>
        [AttributeLogicalName("dia_paymentmethod")]
        public dia_paymentmethod? dia_PaymentMethod {
            get {
                return GetOptionSetValue<dia_paymentmethod>("dia_paymentmethod");
            }
            set {
                SetOptionSetValue("dia_paymentmethod", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Payment type</para>
        /// </summary>
        [AttributeLogicalName("dia_paymenttype")]
        public dia_paymenttype? dia_PaymentType {
            get {
                return GetOptionSetValue<dia_paymenttype>("dia_paymenttype");
            }
            set {
                SetOptionSetValue("dia_paymenttype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Replacement certificate associated with Order.</para>
        /// <para>Display Name: Replacement Certificate</para>
        /// </summary>
        [AttributeLogicalName("dia_replacementcertificateid")]
        public EntityReference dia_ReplacementCertificateId {
            get {
                return GetAttributeValue<EntityReference>("dia_replacementcertificateid");
            }
            set {
                SetAttributeValue("dia_replacementcertificateid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Date payment received</para>
        /// </summary>
        [AttributeLogicalName("dia_datepaymentreceived")]
        public DateTime? dia_datepaymentreceived {
            get {
                return GetAttributeValue<DateTime?>("dia_datepaymentreceived");
            }
            set {
                SetAttributeValue("dia_datepaymentreceived", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Amount in base currency.</para>
        /// <para>Display Name: Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("dia_infinityamount_base")]
        public decimal? dia_infinityamount_Base {
            get {
                return GetMoneyValue("dia_infinityamount_base");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Infinity number</para>
        /// </summary>
        [AttributeLogicalName("dia_infinitynumber")]
        public string dia_infinitynumber {
            get {
                return GetAttributeValue<string>("dia_infinitynumber");
            }
            set {
                SetAttributeValue("dia_infinitynumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Service request</para>
        /// </summary>
        [AttributeLogicalName("dia_servicerequestid")]
        public EntityReference dia_servicerequestid {
            get {
                return GetAttributeValue<EntityReference>("dia_servicerequestid");
            }
            set {
                SetAttributeValue("dia_servicerequestid", value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Emails")]
        public IEnumerable<Email> SalesOrder_Emails {
            get {
                return GetRelatedEntities<Email>("SalesOrder_Emails", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_orders")]
        public BusinessUnit business_unit_orders {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_orders", null);
            }
            set {
                SetRelatedEntity("business_unit_orders", null, value);
            }
        }
        
        [AttributeLogicalName("dia_servicerequestid")]
        [RelationshipSchemaName("dia_incident_salesorder_servicerequestid")]
        public Incident dia_incident_salesorder_servicerequestid {
            get {
                return GetRelatedEntity<Incident>("dia_incident_salesorder_servicerequestid", null);
            }
            set {
                SetRelatedEntity("dia_incident_salesorder_servicerequestid", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_salesorder_createdonbehalfby")]
        public SystemUser lk_salesorder_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorder_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorder_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_salesorder_modifiedonbehalfby")]
        public SystemUser lk_salesorder_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorder_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorder_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_salesorderbase_createdby")]
        public SystemUser lk_salesorderbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_salesorderbase_modifiedby")]
        public SystemUser lk_salesorderbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("order_details")]
        public IEnumerable<SalesOrderDetail> order_details {
            get {
                return GetRelatedEntities<SalesOrderDetail>("order_details", null);
            }
            set {
                SetRelatedEntities("order_details", null, value);
            }
        }
        
        [AttributeLogicalName("pricelevelid")]
        [RelationshipSchemaName("price_level_orders")]
        public PriceLevel price_level_orders {
            get {
                return GetRelatedEntity<PriceLevel>("price_level_orders", null);
            }
            set {
                SetRelatedEntity("price_level_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("salesorder_activity_parties")]
        public IEnumerable<ActivityParty> salesorder_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("salesorder_activity_parties", null);
            }
            set {
                SetRelatedEntities("salesorder_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_orders")]
        public SystemUser system_user_orders {
            get {
                return GetRelatedEntity<SystemUser>("system_user_orders", null);
            }
            set {
                SetRelatedEntity("system_user_orders", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_orders")]
        public Team team_orders {
            get {
                return GetRelatedEntity<Team>("team_orders", null);
            }
            set {
                SetRelatedEntity("team_orders", null, value);
            }
        }
        
        public static SalesOrder Retrieve(IOrganizationService service, Guid id, params Expression<Func<SalesOrder,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum SalesOrder_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum SalesOrder_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        Pending = 2,
        
        [EnumMember()]
        Paid = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        Complete = 100001,
        
        [EnumMember()]
        Partial = 100002,
        
        [EnumMember()]
        Invoiced = 100003,
    }
    
    [DataContract()]
    public enum SalesOrder_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SalesOrder_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum SalesOrder_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SalesOrder_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum SalesOrderState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Submitted = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Fulfilled = 3,
        
        [EnumMember()]
        Invoiced = 4,
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>Activity that is delivered using email protocols.</para>
    /// <para>Display Name: Email</para>
    /// </summary>
    [EntityLogicalName("email")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Email : ExtendedEntity<EmailState, Email_StatusCode> {
        
        public const string EntityLogicalName = "email";
        
        public const int EntityTypeCode = 4202;
        
        public Email() : 
                base(EntityLogicalName) {
        }
        
        public Email(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email activity.</para>
        /// <para>Display Name: Email Message</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the email. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the umber of attachments of the email message.</para>
        /// <para>Display Name: Attachment Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentcount")]
        public int? AttachmentCount {
            get {
                return GetAttributeValue<int?>("attachmentcount");
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times an email attachment has been viewed.</para>
        /// <para>Display Name: Attachment Open Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentopencount")]
        public int? AttachmentOpenCount {
            get {
                return GetAttributeValue<int?>("attachmentopencount");
            }
            set {
                SetAttributeValue("attachmentopencount", value);
            }
        }
        
        /// <summary>
        /// <para>Hash of base of conversation index.</para>
        /// <para>Display Name: Conversation Index (Hash)</para>
        /// </summary>
        [AttributeLogicalName("baseconversationindexhash")]
        public int? BaseConversationIndexHash {
            get {
                return GetAttributeValue<int?>("baseconversationindexhash");
            }
            set {
                SetAttributeValue("baseconversationindexhash", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that are included on the email distribution, but are not displayed to other recipients.</para>
        /// <para>Display Name: Bcc</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that should be copied on the email.</para>
        /// <para>Display Name: Cc</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the body is compressed.</para>
        /// <para>Display Name: Compression</para>
        /// </summary>
        [AttributeLogicalName("compressed")]
        public bool? Compressed {
            get {
                return GetAttributeValue<bool?>("compressed");
            }
        }
        
        /// <summary>
        /// <para>Identifier for all the email responses for this conversation.</para>
        /// <para>Display Name: Conversation Index</para>
        /// </summary>
        [AttributeLogicalName("conversationindex")]
        public string ConversationIndex {
            get {
                return GetAttributeValue<string>("conversationindex");
            }
        }
        
        /// <summary>
        /// <para>Conversation Tracking Id.</para>
        /// <para>Display Name: Conversation Tracking Id</para>
        /// </summary>
        [AttributeLogicalName("conversationtrackingid")]
        public Guid? ConversationTrackingId {
            get {
                return GetAttributeValue<Guid?>("conversationtrackingid");
            }
            set {
                SetAttributeValue("conversationtrackingid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how an email is matched to an existing email in Microsoft Dynamics 365. For system use only.</para>
        /// <para>Display Name: Correlation Method</para>
        /// </summary>
        [AttributeLogicalName("correlationmethod")]
        public Email_CorrelationMethod? CorrelationMethod {
            get {
                return GetOptionSetValue<Email_CorrelationMethod>("correlationmethod");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected date and time when email will be sent.</para>
        /// <para>Display Name: Send Later</para>
        /// </summary>
        [AttributeLogicalName("delayedemailsendtime")]
        public DateTime? DelayedEmailSendTime {
            get {
                return GetAttributeValue<DateTime?>("delayedemailsendtime");
            }
            set {
                SetAttributeValue("delayedemailsendtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.</para>
        /// <para>Display Name: No. of Delivery Attempts</para>
        /// </summary>
        [AttributeLogicalName("deliveryattempts")]
        public int? DeliveryAttempts {
            get {
                return GetAttributeValue<int?>("deliveryattempts");
            }
            set {
                SetAttributeValue("deliveryattempts", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority of delivery of the email to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the sender should receive confirmation that the email was delivered.</para>
        /// <para>Display Name: Delivery Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("deliveryreceiptrequested")]
        public bool? DeliveryReceiptRequested {
            get {
                return GetAttributeValue<bool?>("deliveryreceiptrequested");
            }
            set {
                SetAttributeValue("deliveryreceiptrequested", value);
            }
        }
        
        /// <summary>
        /// <para>Type the greeting and message text of the email.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the email as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when an email reminder expires.</para>
        /// <para>Display Name: Email Reminder Expiry Time</para>
        /// </summary>
        [AttributeLogicalName("emailreminderexpirytime")]
        public DateTime? EmailReminderExpiryTime {
            get {
                return GetAttributeValue<DateTime?>("emailreminderexpirytime");
            }
            set {
                SetAttributeValue("emailreminderexpirytime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the email reminder.</para>
        /// <para>Display Name: Email Reminder Status</para>
        /// </summary>
        [AttributeLogicalName("emailreminderstatus")]
        public Email_EmailReminderStatus? EmailReminderStatus {
            get {
                return GetOptionSetValue<Email_EmailReminderStatus>("emailreminderstatus");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Email Reminder Text</para>
        /// </summary>
        [AttributeLogicalName("emailremindertext")]
        public string EmailReminderText {
            get {
                return GetAttributeValue<string>("emailremindertext");
            }
            set {
                SetAttributeValue("emailremindertext", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of the email reminder.</para>
        /// <para>Display Name: Email Reminder Type</para>
        /// </summary>
        [AttributeLogicalName("emailremindertype")]
        public Email_EmailReminderType? EmailReminderType {
            get {
                return GetOptionSetValue<Email_EmailReminderType>("emailremindertype");
            }
            set {
                SetOptionSetValue("emailremindertype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sender of the email.</para>
        /// <para>Display Name: Sender</para>
        /// </summary>
        [AttributeLogicalName("emailsender")]
        public EntityReference EmailSender {
            get {
                return GetAttributeValue<EntityReference>("emailsender");
            }
        }
        
        /// <summary>
        /// <para>Email Tracking Id.</para>
        /// <para>Display Name: Email Tracking Id</para>
        /// </summary>
        [AttributeLogicalName("emailtrackingid")]
        public Guid? EmailTrackingId {
            get {
                return GetAttributeValue<Guid?>("emailtrackingid");
            }
            set {
                SetAttributeValue("emailtrackingid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select whether the email allows following recipient activities sent from Microsoft Dynamics 365.This is user preference state which can be overridden by system evaluated state.</para>
        /// <para>Display Name: Following</para>
        /// </summary>
        [AttributeLogicalName("followemailuserpreference")]
        public bool? FollowEmailUserPreference {
            get {
                return GetAttributeValue<bool?>("followemailuserpreference");
            }
            set {
                SetAttributeValue("followemailuserpreference", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ID of the email message that this email activity is a response to.</para>
        /// <para>Display Name: In Reply To Message</para>
        /// </summary>
        [AttributeLogicalName("inreplyto")]
        public string InReplyTo {
            get {
                return GetAttributeValue<string>("inreplyto");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the email activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows whether this email is followed. This is evaluated state which overrides user selection of follow email.</para>
        /// <para>Display Name: Followed</para>
        /// </summary>
        [AttributeLogicalName("isemailfollowed")]
        public bool? IsEmailFollowed {
            get {
                return GetAttributeValue<bool?>("isemailfollowed");
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows whether this email Reminder is Set.</para>
        /// <para>Display Name: Reminder Set</para>
        /// </summary>
        [AttributeLogicalName("isemailreminderset")]
        public bool? IsEmailReminderSet {
            get {
                return GetAttributeValue<bool?>("isemailreminderset");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: IsUnsafe</para>
        /// </summary>
        [AttributeLogicalName("isunsafe")]
        public int? IsUnsafe {
            get {
                return GetAttributeValue<int?>("isunsafe");
            }
        }
        
        /// <summary>
        /// <para>Indication if the email was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the latest date and time when email was opened.</para>
        /// <para>Display Name: Last Opened Time</para>
        /// </summary>
        [AttributeLogicalName("lastopenedtime")]
        public DateTime? LastOpenedTime {
            get {
                return GetAttributeValue<DateTime?>("lastopenedtime");
            }
            set {
                SetAttributeValue("lastopenedtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times a link in an email has been clicked.</para>
        /// <para>Display Name: Links Clicked Count</para>
        /// </summary>
        [AttributeLogicalName("linksclickedcount")]
        public int? LinksClickedCount {
            get {
                return GetAttributeValue<int?>("linksclickedcount");
            }
            set {
                SetAttributeValue("linksclickedcount", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email message. Used only for email that is received.</para>
        /// <para>Display Name: Message ID</para>
        /// </summary>
        [AttributeLogicalName("messageid")]
        public string MessageId {
            get {
                return GetAttributeValue<string>("messageid");
            }
            set {
                SetAttributeValue("messageid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Message ID Dup Check</para>
        /// </summary>
        [AttributeLogicalName("messageiddupcheck")]
        public Guid? MessageIdDupCheck {
            get {
                return GetAttributeValue<Guid?>("messageiddupcheck");
            }
            set {
                SetAttributeValue("messageiddupcheck", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the email message data.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.</para>
        /// <para>Display Name: Notifications</para>
        /// </summary>
        [AttributeLogicalName("notifications")]
        public Email_Notifications? Notifications {
            get {
                return GetOptionSetValue<Email_Notifications>("notifications");
            }
            set {
                SetOptionSetValue("notifications", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times an email has been opened.</para>
        /// <para>Display Name: Open Count</para>
        /// </summary>
        [AttributeLogicalName("opencount")]
        public int? OpenCount {
            get {
                return GetAttributeValue<int?>("opencount");
            }
            set {
                SetAttributeValue("opencount", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the email activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the email activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the email activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select the activity that the email is associated with.</para>
        /// <para>Display Name: Parent Activity Id</para>
        /// </summary>
        [AttributeLogicalName("parentactivityid")]
        public EntityReference ParentActivityId {
            get {
                return GetAttributeValue<EntityReference>("parentactivityid");
            }
            set {
                SetAttributeValue("parentactivityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay email processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeemailprocessinguntil")]
        public DateTime? PostponeEmailProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeemailprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Email_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Email_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that a read receipt is requested.</para>
        /// <para>Display Name: Read Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("readreceiptrequested")]
        public bool? ReadReceiptRequested {
            get {
                return GetAttributeValue<bool?>("readreceiptrequested");
            }
            set {
                SetAttributeValue("readreceiptrequested", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the record that the email relates to.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Reminder Action Card Id.</para>
        /// <para>Display Name: Reminder Action Card Id.</para>
        /// </summary>
        [AttributeLogicalName("reminderactioncardid")]
        public Guid? ReminderActionCardId {
            get {
                return GetAttributeValue<Guid?>("reminderactioncardid");
            }
            set {
                SetAttributeValue("reminderactioncardid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of replies received for an email.</para>
        /// <para>Display Name: Reply Count</para>
        /// </summary>
        [AttributeLogicalName("replycount")]
        public int? ReplyCount {
            get {
                return GetAttributeValue<int?>("replycount");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the email record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this email. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the email activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("sender")]
        public string Sender {
            get {
                return GetAttributeValue<string>("sender");
            }
            set {
                SetAttributeValue("sender", value);
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account of the sender of the email.</para>
        /// <para>Display Name: Senders Account</para>
        /// </summary>
        [AttributeLogicalName("sendersaccount")]
        public EntityReference SendersAccount {
            get {
                return GetAttributeValue<EntityReference>("sendersaccount");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time that the email was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public EmailState? StateCode {
            get {
                return GetOptionSetValue<EmailState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the email's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Email_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Email_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the email.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics 365.</para>
        /// <para>Display Name: Submitted By</para>
        /// </summary>
        [AttributeLogicalName("submittedby")]
        public string SubmittedBy {
            get {
                return GetAttributeValue<string>("submittedby");
            }
            set {
                SetAttributeValue("submittedby", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. ID for template used in email.</para>
        /// <para>Display Name: ID for template used.</para>
        /// </summary>
        [AttributeLogicalName("templateid")]
        public EntityReference TemplateId {
            get {
                return GetAttributeValue<EntityReference>("templateid");
            }
            set {
                SetAttributeValue("templateid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user recipients for the email.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the email addresses corresponding to the recipients.</para>
        /// <para>Display Name: To Recipients</para>
        /// </summary>
        [AttributeLogicalName("torecipients")]
        public string ToRecipients {
            get {
                return GetAttributeValue<string>("torecipients");
            }
            set {
                SetAttributeValue("torecipients", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics 365.</para>
        /// <para>Display Name: Tracking Token</para>
        /// </summary>
        [AttributeLogicalName("trackingtoken")]
        public string TrackingToken {
            get {
                return GetAttributeValue<string>("trackingtoken");
            }
            set {
                SetAttributeValue("trackingtoken", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the email message.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Emails")]
        public Incident Incident_Emails {
            get {
                return GetRelatedEntity<Incident>("Incident_Emails", null);
            }
            set {
                SetRelatedEntity("Incident_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Queue_Email_EmailSender")]
        public Queue Queue_Email_EmailSender {
            get {
                return GetRelatedEntity<Queue>("Queue_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Queue_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referenced)]
        public IEnumerable<Email> Referencedemail_email_parentactivityid {
            get {
                return GetRelatedEntities<Email>("email_email_parentactivityid", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("email_email_parentactivityid", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentactivityid")]
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referencing)]
        public Email Referencingemail_email_parentactivityid {
            get {
                return GetRelatedEntity<Email>("email_email_parentactivityid", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("email_email_parentactivityid", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Emails")]
        public SalesOrder SalesOrder_Emails {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Emails", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("SystemUser_Email_EmailSender")]
        public SystemUser SystemUser_Email_EmailSender {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("SystemUser_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_email_activities")]
        public BusinessUnit business_unit_email_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_email_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_email_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("email_activity_mime_attachment")]
        public IEnumerable<ActivityMimeAttachment> email_activity_mime_attachment {
            get {
                return GetRelatedEntities<ActivityMimeAttachment>("email_activity_mime_attachment", null);
            }
            set {
                SetRelatedEntities("email_activity_mime_attachment", null, value);
            }
        }
        
        [RelationshipSchemaName("email_activity_parties")]
        public IEnumerable<ActivityParty> email_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("email_activity_parties", null);
            }
            set {
                SetRelatedEntities("email_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_email_createdby")]
        public SystemUser lk_email_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_email_createdonbehalfby")]
        public SystemUser lk_email_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_email_modifiedby")]
        public SystemUser lk_email_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_email_modifiedonbehalfby")]
        public SystemUser lk_email_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_email")]
        public Team team_email {
            get {
                return GetRelatedEntity<Team>("team_email", null);
            }
            set {
                SetRelatedEntity("team_email", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_email")]
        public SystemUser user_email {
            get {
                return GetRelatedEntity<SystemUser>("user_email", null);
            }
            set {
                SetRelatedEntity("user_email", null, value);
            }
        }
        
        public static Email Retrieve(IOrganizationService service, Guid id, params Expression<Func<Email,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum Email_Notifications {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        ThemessagewassavedasaMicrosoftDynamics365emailrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid = 1,
        
        [EnumMember()]
        Truncatedbody = 2,
    }
    
    [DataContract()]
    public enum Email_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Sent = 3,
        
        [EnumMember()]
        Received = 4,
        
        [EnumMember()]
        Canceled = 5,
        
        [EnumMember()]
        PendingSend = 6,
        
        [EnumMember()]
        Sending = 7,
        
        [EnumMember()]
        Failed = 8,
    }
    
    [DataContract()]
    public enum Email_EmailReminderStatus {
        
        [EnumMember()]
        NotSet = 0,
        
        [EnumMember()]
        ReminderSet = 1,
        
        [EnumMember()]
        ReminderExpired = 2,
        
        [EnumMember()]
        ReminderInvalid = 3,
    }
    
    [DataContract()]
    public enum Email_EmailReminderType {
        
        [EnumMember()]
        IfIdonotreceiveareplyby = 0,
        
        [EnumMember()]
        Iftheemailisnotopenedby = 1,
        
        [EnumMember()]
        Remindmeanywaysat = 2,
    }
    
    [DataContract()]
    public enum Email_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum Email_CorrelationMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        Skipped = 1,
        
        [EnumMember()]
        XHeader = 2,
        
        [EnumMember()]
        InReplyTo = 3,
        
        [EnumMember()]
        TrackingToken = 4,
        
        [EnumMember()]
        ConversationIndex = 5,
        
        [EnumMember()]
        SmartMatching = 6,
        
        [EnumMember()]
        CustomCorrelation = 7,
    }
    
    [DataContract()]
    public enum EmailState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
}

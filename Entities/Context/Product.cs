//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>Information about products and their pricing information.</para>
    /// <para>Display Name: Product</para>
    /// </summary>
    [EntityLogicalName("product")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Product : ExtendedEntity<ProductState, Product_StatusCode> {
        
        public const string EntityLogicalName = "product";
        
        public const int EntityTypeCode = 1024;
        
        public Product() : 
                base(EntityLogicalName) {
        }
        
        public Product(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("productid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the product.</para>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public Guid? ProductId {
            get {
                return GetAttributeValue<Guid?>("productid");
            }
            set {
                SetId("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the product.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the product.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Current cost for the product item. Used in price calculations.</para>
        /// <para>Display Name: Current Cost</para>
        /// </summary>
        [AttributeLogicalName("currentcost")]
        public decimal? CurrentCost {
            get {
                return GetMoneyValue("currentcost");
            }
            set {
                SetMoneyValue("currentcost", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Current Cost in base currency.</para>
        /// <para>Display Name: Current Cost (Base)</para>
        /// </summary>
        [AttributeLogicalName("currentcost_base")]
        public decimal? CurrentCost_Base {
            get {
                return GetMoneyValue("currentcost_base");
            }
        }
        
        /// <summary>
        /// <para>Internal Use Only</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("dmtimportstate")]
        public int? DMTImportState {
            get {
                return GetAttributeValue<int?>("dmtimportstate");
            }
            set {
                SetAttributeValue("dmtimportstate", value);
            }
        }
        
        /// <summary>
        /// <para>Default unit for the product.</para>
        /// <para>Display Name: Default Unit</para>
        /// </summary>
        [AttributeLogicalName("defaultuomid")]
        public EntityReference DefaultUoMId {
            get {
                return GetAttributeValue<EntityReference>("defaultuomid");
            }
            set {
                SetAttributeValue("defaultuomid", value);
            }
        }
        
        /// <summary>
        /// <para>Default unit group for the product.</para>
        /// <para>Display Name: Unit Group</para>
        /// </summary>
        [AttributeLogicalName("defaultuomscheduleid")]
        public EntityReference DefaultUoMScheduleId {
            get {
                return GetAttributeValue<EntityReference>("defaultuomscheduleid");
            }
            set {
                SetAttributeValue("defaultuomscheduleid", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the product.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the product with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Hierarchy path of the product.</para>
        /// <para>Display Name: Hierarchy Path</para>
        /// </summary>
        [AttributeLogicalName("hierarchypath")]
        public string HierarchyPath {
            get {
                return GetAttributeValue<string>("hierarchypath");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether the product is a kit.</para>
        /// <para>Display Name: Is Kit</para>
        /// </summary>
        [AttributeLogicalName("iskit")]
        public bool? IsKit {
            get {
                return GetAttributeValue<bool?>("iskit");
            }
            set {
                SetAttributeValue("iskit", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Is Reparented</para>
        /// </summary>
        [AttributeLogicalName("isreparented")]
        public bool? IsReparented {
            get {
                return GetAttributeValue<bool?>("isreparented");
            }
            set {
                SetAttributeValue("isreparented", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the product is a stock item.</para>
        /// <para>Display Name: Stock Item</para>
        /// </summary>
        [AttributeLogicalName("isstockitem")]
        public bool? IsStockItem {
            get {
                return GetAttributeValue<bool?>("isstockitem");
            }
            set {
                SetAttributeValue("isstockitem", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the product.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the product.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the product.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the organization</para>
        /// <para>Display Name: Organization Id</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the parent product family hierarchy.</para>
        /// <para>Display Name: Parent</para>
        /// </summary>
        [AttributeLogicalName("parentproductid")]
        public EntityReference ParentProductId {
            get {
                return GetAttributeValue<EntityReference>("parentproductid");
            }
            set {
                SetAttributeValue("parentproductid", value);
            }
        }
        
        /// <summary>
        /// <para>List price of the product.</para>
        /// <para>Display Name: List Price</para>
        /// </summary>
        [AttributeLogicalName("price")]
        public decimal? Price {
            get {
                return GetMoneyValue("price");
            }
            set {
                SetMoneyValue("price", value);
            }
        }
        
        /// <summary>
        /// <para>Select the default price list for the product.</para>
        /// <para>Display Name: Default Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the List Price in base currency.</para>
        /// <para>Display Name: List Price (Base)</para>
        /// </summary>
        [AttributeLogicalName("price_base")]
        public decimal? Price_Base {
            get {
                return GetMoneyValue("price_base");
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the process associated with the entity.</para>
        /// <para>Display Name: Process Id</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>User-defined product ID.</para>
        /// <para>Display Name: Product ID</para>
        /// </summary>
        [AttributeLogicalName("productnumber")]
        public string ProductNumber {
            get {
                return GetAttributeValue<string>("productnumber");
            }
            set {
                SetAttributeValue("productnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Product Structure.</para>
        /// <para>Display Name: Product Structure</para>
        /// </summary>
        [AttributeLogicalName("productstructure")]
        public Product_ProductStructure? ProductStructure {
            get {
                return GetOptionSetValue<Product_ProductStructure>("productstructure");
            }
            set {
                SetOptionSetValue("productstructure", value);
            }
        }
        
        /// <summary>
        /// <para>Type of product.</para>
        /// <para>Display Name: Product Type</para>
        /// </summary>
        [AttributeLogicalName("producttypecode")]
        public Product_ProductTypeCode? ProductTypeCode {
            get {
                return GetOptionSetValue<Product_ProductTypeCode>("producttypecode");
            }
            set {
                SetOptionSetValue("producttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>URL for the Website associated with the product.</para>
        /// <para>Display Name: URL</para>
        /// </summary>
        [AttributeLogicalName("producturl")]
        public string ProductUrl {
            get {
                return GetAttributeValue<string>("producturl");
            }
            set {
                SetAttributeValue("producturl", value);
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used in monetary amounts for the product.</para>
        /// <para>Display Name: Decimals Supported</para>
        /// </summary>
        [AttributeLogicalName("quantitydecimal")]
        public int? QuantityDecimal {
            get {
                return GetAttributeValue<int?>("quantitydecimal");
            }
            set {
                SetAttributeValue("quantitydecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Quantity of the product in stock.</para>
        /// <para>Display Name: Quantity On Hand</para>
        /// </summary>
        [AttributeLogicalName("quantityonhand")]
        public decimal? QuantityOnHand {
            get {
                return GetAttributeValue<decimal?>("quantityonhand");
            }
            set {
                SetAttributeValue("quantityonhand", value);
            }
        }
        
        /// <summary>
        /// <para>Product size.</para>
        /// <para>Display Name: Size</para>
        /// </summary>
        [AttributeLogicalName("size")]
        public string Size {
            get {
                return GetAttributeValue<string>("size");
            }
            set {
                SetAttributeValue("size", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the stage where the entity is located.</para>
        /// <para>Display Name: (Deprecated) Stage Id</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Standard cost of the product.</para>
        /// <para>Display Name: Standard Cost</para>
        /// </summary>
        [AttributeLogicalName("standardcost")]
        public decimal? StandardCost {
            get {
                return GetMoneyValue("standardcost");
            }
            set {
                SetMoneyValue("standardcost", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Standard Cost in base currency.</para>
        /// <para>Display Name: Standard Cost (Base)</para>
        /// </summary>
        [AttributeLogicalName("standardcost_base")]
        public decimal? StandardCost_Base {
            get {
                return GetMoneyValue("standardcost_base");
            }
        }
        
        /// <summary>
        /// <para>Status of the product.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ProductState? StateCode {
            get {
                return GetOptionSetValue<ProductState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the product.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Product_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Product_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Stock volume of the product.</para>
        /// <para>Display Name: Stock Volume</para>
        /// </summary>
        [AttributeLogicalName("stockvolume")]
        public decimal? StockVolume {
            get {
                return GetAttributeValue<decimal?>("stockvolume");
            }
            set {
                SetAttributeValue("stockvolume", value);
            }
        }
        
        /// <summary>
        /// <para>Stock weight of the product.</para>
        /// <para>Display Name: Stock Weight</para>
        /// </summary>
        [AttributeLogicalName("stockweight")]
        public decimal? StockWeight {
            get {
                return GetAttributeValue<decimal?>("stockweight");
            }
            set {
                SetAttributeValue("stockweight", value);
            }
        }
        
        /// <summary>
        /// <para>Select a category for the product.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId {
            get {
                return GetAttributeValue<EntityReference>("subjectid");
            }
            set {
                SetAttributeValue("subjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the product's supplier.</para>
        /// <para>Display Name: Supplier Name</para>
        /// </summary>
        [AttributeLogicalName("suppliername")]
        public string SupplierName {
            get {
                return GetAttributeValue<string>("suppliername");
            }
            set {
                SetAttributeValue("suppliername", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the product.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date from which this product is valid.</para>
        /// <para>Display Name: Valid From</para>
        /// </summary>
        [AttributeLogicalName("validfromdate")]
        public DateTime? ValidFromDate {
            get {
                return GetAttributeValue<DateTime?>("validfromdate");
            }
            set {
                SetAttributeValue("validfromdate", value);
            }
        }
        
        /// <summary>
        /// <para>Date to which this product is valid.</para>
        /// <para>Display Name: Valid To</para>
        /// </summary>
        [AttributeLogicalName("validtodate")]
        public DateTime? ValidToDate {
            get {
                return GetAttributeValue<DateTime?>("validtodate");
            }
            set {
                SetAttributeValue("validtodate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of vendor supplying the product.</para>
        /// <para>Display Name: Vendor ID</para>
        /// </summary>
        [AttributeLogicalName("vendorid")]
        public string VendorID {
            get {
                return GetAttributeValue<string>("vendorid");
            }
            set {
                SetAttributeValue("vendorid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the product vendor.</para>
        /// <para>Display Name: Vendor</para>
        /// </summary>
        [AttributeLogicalName("vendorname")]
        public string VendorName {
            get {
                return GetAttributeValue<string>("vendorname");
            }
            set {
                SetAttributeValue("vendorname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique part identifier in vendor catalog of this product.</para>
        /// <para>Display Name: Vendor Name</para>
        /// </summary>
        [AttributeLogicalName("vendorpartnumber")]
        public string VendorPartNumber {
            get {
                return GetAttributeValue<string>("vendorpartnumber");
            }
            set {
                SetAttributeValue("vendorpartnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("product_parent_product", EntityRole.Referenced)]
        public IEnumerable<Product> Referencedproduct_parent_product {
            get {
                return GetRelatedEntities<Product>("product_parent_product", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("product_parent_product", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentproductid")]
        [RelationshipSchemaName("product_parent_product", EntityRole.Referencing)]
        public Product Referencingproduct_parent_product {
            get {
                return GetRelatedEntity<Product>("product_parent_product", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("product_parent_product", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("dia_product_applicationtype")]
        public IEnumerable<dia_applicationtype> dia_product_applicationtype {
            get {
                return GetRelatedEntities<dia_applicationtype>("dia_product_applicationtype", null);
            }
            set {
                SetRelatedEntities("dia_product_applicationtype", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_product_createdonbehalfby")]
        public SystemUser lk_product_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_product_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_product_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_product_modifiedonbehalfby")]
        public SystemUser lk_product_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_product_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_product_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_productbase_createdby")]
        public SystemUser lk_productbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_productbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_productbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_productbase_modifiedby")]
        public SystemUser lk_productbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_productbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_productbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("pricelevelid")]
        [RelationshipSchemaName("price_level_products")]
        public PriceLevel price_level_products {
            get {
                return GetRelatedEntity<PriceLevel>("price_level_products", null);
            }
            set {
                SetRelatedEntity("price_level_products", null, value);
            }
        }
        
        [RelationshipSchemaName("product_incidents")]
        public IEnumerable<Incident> product_incidents {
            get {
                return GetRelatedEntities<Incident>("product_incidents", null);
            }
            set {
                SetRelatedEntities("product_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("product_order_details")]
        public IEnumerable<SalesOrderDetail> product_order_details {
            get {
                return GetRelatedEntities<SalesOrderDetail>("product_order_details", null);
            }
            set {
                SetRelatedEntities("product_order_details", null, value);
            }
        }
        
        public static Product Retrieve(IOrganizationService service, Guid id, params Expression<Func<Product,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum Product_ProductStructure {
        
        [EnumMember()]
        Product = 1,
        
        [EnumMember()]
        ProductFamily = 2,
        
        [EnumMember()]
        ProductBundle = 3,
    }
    
    [DataContract()]
    public enum ProductState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Retired = 1,
        
        [EnumMember()]
        Draft = 2,
        
        [EnumMember()]
        UnderRevision = 3,
    }
    
    [DataContract()]
    public enum Product_ProductTypeCode {
        
        [EnumMember()]
        SalesInventory = 1,
        
        [EnumMember()]
        MiscellaneousCharges = 2,
        
        [EnumMember()]
        Services = 3,
        
        [EnumMember()]
        FlatFees = 4,
    }
    
    [DataContract()]
    public enum Product_StatusCode {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Retired = 2,
        
        [EnumMember()]
        UnderRevision = 3,
    }
}

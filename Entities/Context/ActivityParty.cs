//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>Person or group associated with an activity. An activity can have multiple activity parties.</para>
    /// <para>Display Name: Activity Party</para>
    /// </summary>
    [EntityLogicalName("activityparty")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityParty : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "activityparty";
        
        public const int EntityTypeCode = 135;
        
        public ActivityParty() : 
                base(EntityLogicalName) {
        }
        
        public ActivityParty(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("partyidname");
            }
        }
        
        [AttributeLogicalName("activitypartyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity party.</para>
        /// <para>Display Name: Activity Party</para>
        /// </summary>
        [AttributeLogicalName("activitypartyid")]
        public Guid? ActivityPartyId {
            get {
                return GetAttributeValue<Guid?>("activitypartyid");
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public EntityReference ActivityId {
            get {
                return GetAttributeValue<EntityReference>("activityid");
            }
            set {
                SetAttributeValue("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Email address to which an email is delivered, and which is associated with the target entity.</para>
        /// <para>Display Name: Address </para>
        /// </summary>
        [AttributeLogicalName("addressused")]
        public string AddressUsed {
            get {
                return GetAttributeValue<string>("addressused");
            }
            set {
                SetAttributeValue("addressused", value);
            }
        }
        
        /// <summary>
        /// <para>Email address column number from associated party.</para>
        /// <para>Display Name: Email column number of party</para>
        /// </summary>
        [AttributeLogicalName("addressusedemailcolumnnumber")]
        public int? AddressUsedEmailColumnNumber {
            get {
                return GetAttributeValue<int?>("addressusedemailcolumnnumber");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending email to the activity party.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEmail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending faxes to the activity party.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow phone calls to the lead.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending postal mail to the lead.</para>
        /// <para>Display Name: Do not allow Postal Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
        }
        
        /// <summary>
        /// <para>Amount of effort used by the resource in a service appointment activity.</para>
        /// <para>Display Name: Effort</para>
        /// </summary>
        [AttributeLogicalName("effort")]
        public double? Effort {
            get {
                return GetAttributeValue<double?>("effort");
            }
            set {
                SetAttributeValue("effort", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Exchange Entry</para>
        /// </summary>
        [AttributeLogicalName("exchangeentryid")]
        public string ExchangeEntryId {
            get {
                return GetAttributeValue<string>("exchangeentryid");
            }
            set {
                SetAttributeValue("exchangeentryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Appointment Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityParty_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityParty_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the underlying entity record is deleted.</para>
        /// <para>Display Name: Is Party Deleted</para>
        /// </summary>
        [AttributeLogicalName("ispartydeleted")]
        public bool? IsPartyDeleted {
            get {
                return GetAttributeValue<bool?>("ispartydeleted");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity_party.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.</para>
        /// <para>Display Name: Participation Type</para>
        /// </summary>
        [AttributeLogicalName("participationtypemask")]
        public ActivityParty_ParticipationTypeMask? ParticipationTypeMask {
            get {
                return GetOptionSetValue<ActivityParty_ParticipationTypeMask>("participationtypemask");
            }
            set {
                SetOptionSetValue("participationtypemask", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the party associated with the activity.</para>
        /// <para>Display Name: Party</para>
        /// </summary>
        [AttributeLogicalName("partyid")]
        public EntityReference PartyId {
            get {
                return GetAttributeValue<EntityReference>("partyid");
            }
            set {
                SetAttributeValue("partyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource specification for the activity party.</para>
        /// <para>Display Name: Resource Specification</para>
        /// </summary>
        [AttributeLogicalName("resourcespecid")]
        public EntityReference ResourceSpecId {
            get {
                return GetAttributeValue<EntityReference>("resourcespecid");
            }
            set {
                SetAttributeValue("resourcespecid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("email_activity_parties")]
        public Email email_activity_parties {
            get {
                return GetRelatedEntity<Email>("email_activity_parties", null);
            }
            set {
                SetRelatedEntity("email_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("incident_activity_parties")]
        public Incident incident_activity_parties {
            get {
                return GetRelatedEntity<Incident>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntity("incident_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("queue_activity_parties")]
        public Queue queue_activity_parties {
            get {
                return GetRelatedEntity<Queue>("queue_activity_parties", null);
            }
            set {
                SetRelatedEntity("queue_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("salesorder_activity_parties")]
        public SalesOrder salesorder_activity_parties {
            get {
                return GetRelatedEntity<SalesOrder>("salesorder_activity_parties", null);
            }
            set {
                SetRelatedEntity("salesorder_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("system_user_activity_parties")]
        public SystemUser system_user_activity_parties {
            get {
                return GetRelatedEntity<SystemUser>("system_user_activity_parties", null);
            }
            set {
                SetRelatedEntity("system_user_activity_parties", null, value);
            }
        }
        
        public static ActivityParty Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityParty,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum ActivityParty_ParticipationTypeMask {
        
        [EnumMember()]
        Sender = 1,
        
        [EnumMember()]
        ToRecipient = 2,
        
        [EnumMember()]
        CCRecipient = 3,
        
        [EnumMember()]
        BCCRecipient = 4,
        
        [EnumMember()]
        Requiredattendee = 5,
        
        [EnumMember()]
        Optionalattendee = 6,
        
        [EnumMember()]
        Organizer = 7,
        
        [EnumMember()]
        Regarding = 8,
        
        [EnumMember()]
        Owner = 9,
        
        [EnumMember()]
        Resource = 10,
        
        [EnumMember()]
        Customer = 11,
    }
    
    [DataContract()]
    public enum ActivityParty_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace CCMS.Entities {
    
    
    /// <summary>
    /// <para>A list of records that require action, such as accounts, activities, and cases.</para>
    /// <para>Display Name: Queue</para>
    /// </summary>
    [EntityLogicalName("queue")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Queue : ExtendedEntity<QueueState, Queue_StatusCode> {
        
        public const string EntityLogicalName = "queue";
        
        public const int EntityTypeCode = 2020;
        
        public Queue() : 
                base(EntityLogicalName) {
        }
        
        public Queue(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("queueid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the queue.</para>
        /// <para>Display Name: Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public Guid? QueueId {
            get {
                return GetAttributeValue<Guid?>("queueid");
            }
            set {
                SetId("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.AllowEmailConnectorToUseCredentials attribute.</para>
        /// <para>Display Name: Allow to Use Credentials for Email Processing (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("allowemailcredentials")]
        public bool? AllowEmailCredentials {
            get {
                return GetAttributeValue<bool?>("allowemailcredentials");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the queue is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the queue record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the queue was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the queue.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with this queue.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("defaultmailbox")]
        public EntityReference DefaultMailbox {
            get {
                return GetAttributeValue<EntityReference>("defaultmailbox");
            }
        }
        
        /// <summary>
        /// <para>Description of the queue.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Email address that is associated with the queue.</para>
        /// <para>Display Name: Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.Password attribute.</para>
        /// <para>Display Name: Password (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("emailpassword")]
        public string EmailPassword {
            get {
                return GetAttributeValue<string>("emailpassword");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the primary email address.</para>
        /// <para>Display Name: Primary Email Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        public Queue_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<Queue_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is no longer used. The data is now in the Mailbox.UserName attribute.</para>
        /// <para>Display Name: User Name (Obsolete)</para>
        /// </summary>
        [AttributeLogicalName("emailusername")]
        public string EmailUsername {
            get {
                return GetAttributeValue<string>("emailusername");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the queue with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether a queue is to ignore unsolicited email (deprecated).</para>
        /// <para>Display Name: Convert To Email Activities</para>
        /// </summary>
        [AttributeLogicalName("ignoreunsolicitedemail")]
        public bool? IgnoreUnsolicitedEmail {
            get {
                return GetAttributeValue<bool?>("ignoreunsolicitedemail");
            }
            set {
                SetAttributeValue("ignoreunsolicitedemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Incoming email delivery method for the queue.</para>
        /// <para>Display Name: Incoming Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        public Queue_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Queue_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Convert Incoming Email To Activities</para>
        /// <para>Display Name: Convert Incoming Email To Activities</para>
        /// </summary>
        [AttributeLogicalName("incomingemailfilteringmethod")]
        public Queue_IncomingEmailFilteringMethod? IncomingEmailFilteringMethod {
            get {
                return GetOptionSetValue<Queue_IncomingEmailFilteringMethod>("incomingemailfilteringmethod");
            }
            set {
                SetOptionSetValue("incomingemailfilteringmethod", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Indication of whether a queue is the fax delivery queue.</para>
        /// <para>Display Name: Fax Queue</para>
        /// </summary>
        [AttributeLogicalName("isfaxqueue")]
        public bool? IsFaxQueue {
            get {
                return GetAttributeValue<bool?>("isfaxqueue");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the queue.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the queue was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the queue.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the queue.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Number of Queue items associated with the queue.</para>
        /// <para>Display Name: Queue Items</para>
        /// </summary>
        [AttributeLogicalName("numberofitems")]
        public int? NumberOfItems {
            get {
                return GetAttributeValue<int?>("numberofitems");
            }
        }
        
        /// <summary>
        /// <para>Number of Members associated with the queue.</para>
        /// <para>Display Name: No. of Members</para>
        /// </summary>
        [AttributeLogicalName("numberofmembers")]
        public int? NumberOfMembers {
            get {
                return GetAttributeValue<int?>("numberofmembers");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the queue.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Outgoing email delivery method for the queue.</para>
        /// <para>Display Name: Outgoing Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        public Queue_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Queue_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the queue.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the queue.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the queue.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the queue.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the owner of the queue.</para>
        /// <para>Display Name: Owner (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("primaryuserid")]
        public EntityReference PrimaryUserId {
            get {
                return GetAttributeValue<EntityReference>("primaryuserid");
            }
            set {
                SetAttributeValue("primaryuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of queue that is automatically assigned when a user or queue is created. The type can be public, private, or work in process.</para>
        /// <para>Display Name: Queue Type</para>
        /// </summary>
        [AttributeLogicalName("queuetypecode")]
        public Queue_QueueTypeCode? QueueTypeCode {
            get {
                return GetOptionSetValue<Queue_QueueTypeCode>("queuetypecode");
            }
        }
        
        /// <summary>
        /// <para>Select whether the queue is public or private. A public queue can be viewed by all. A private queue can be viewed only by the members added to the queue.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("queueviewtype")]
        public Queue_QueueViewType? QueueViewType {
            get {
                return GetOptionSetValue<Queue_QueueViewType>("queueviewtype");
            }
            set {
                SetOptionSetValue("queueviewtype", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the queue.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public QueueState? StateCode {
            get {
                return GetOptionSetValue<QueueState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the queue.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Queue_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Queue_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the queue.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the queue.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Allocated</para>
        /// </summary>
        [AttributeLogicalName("dia_allocated")]
        public int? dia_allocated {
            get {
                return GetAttributeValue<int?>("dia_allocated");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Allocated.</para>
        /// <para>Display Name: Allocated (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dia_allocated_date")]
        public DateTime? dia_allocated_Date {
            get {
                return GetAttributeValue<DateTime?>("dia_allocated_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Allocated.</para>
        /// <para>Display Name: Allocated (State)</para>
        /// </summary>
        [AttributeLogicalName("dia_allocated_state")]
        public int? dia_allocated_State {
            get {
                return GetAttributeValue<int?>("dia_allocated_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Unallocated</para>
        /// </summary>
        [AttributeLogicalName("dia_unallocated")]
        public int? dia_unallocated {
            get {
                return GetAttributeValue<int?>("dia_unallocated");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Unallocated.</para>
        /// <para>Display Name: Unallocated (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dia_unallocated_date")]
        public DateTime? dia_unallocated_Date {
            get {
                return GetAttributeValue<DateTime?>("dia_unallocated_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Unallocated.</para>
        /// <para>Display Name: Unallocated (State)</para>
        /// </summary>
        [AttributeLogicalName("dia_unallocated_state")]
        public int? dia_unallocated_State {
            get {
                return GetAttributeValue<int?>("dia_unallocated_state");
            }
        }
        
        [RelationshipSchemaName("Queue_Email_EmailSender")]
        public IEnumerable<Email> Queue_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Queue_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Queue_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_queues")]
        public BusinessUnit business_unit_queues {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_queues", null);
            }
            set {
                SetRelatedEntity("business_unit_queues", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_queues2")]
        public BusinessUnit business_unit_queues2 {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_queues2", null);
            }
            set {
                SetRelatedEntity("business_unit_queues2", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_queue_createdonbehalfby")]
        public SystemUser lk_queue_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queue_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_queue_modifiedonbehalfby")]
        public SystemUser lk_queue_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queue_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_queuebase_createdby")]
        public SystemUser lk_queuebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queuebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_queuebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_queuebase_modifiedby")]
        public SystemUser lk_queuebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queuebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_queuebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("queue_activity_parties")]
        public IEnumerable<ActivityParty> queue_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("queue_activity_parties", null);
            }
            set {
                SetRelatedEntities("queue_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("primaryuserid")]
        [RelationshipSchemaName("queue_primary_user")]
        public SystemUser queue_primary_user {
            get {
                return GetRelatedEntity<SystemUser>("queue_primary_user", null);
            }
            set {
                SetRelatedEntity("queue_primary_user", null, value);
            }
        }
        
        [RelationshipSchemaName("queue_system_user")]
        public IEnumerable<SystemUser> queue_system_user {
            get {
                return GetRelatedEntities<SystemUser>("queue_system_user", null);
            }
            set {
                SetRelatedEntities("queue_system_user", null, value);
            }
        }
        
        [RelationshipSchemaName("queue_team")]
        public IEnumerable<Team> queue_team {
            get {
                return GetRelatedEntities<Team>("queue_team", null);
            }
            set {
                SetRelatedEntities("queue_team", null, value);
            }
        }
        
        [RelationshipSchemaName("queuemembership_association")]
        public IEnumerable<SystemUser> queuemembership_association {
            get {
                return GetRelatedEntities<SystemUser>("queuemembership_association", null);
            }
            set {
                SetRelatedEntities("queuemembership_association", null, value);
            }
        }
        
        public static Queue Retrieve(IOrganizationService service, Guid id, params Expression<Func<Queue,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum Queue_QueueTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Queue_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum QueueState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Queue_EmailRouterAccessApproval {
        
        [EnumMember()]
        Empty = 0,
        
        [EnumMember()]
        Approved = 1,
        
        [EnumMember()]
        PendingApproval = 2,
        
        [EnumMember()]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum Queue_QueueViewType {
        
        [EnumMember()]
        Public = 0,
        
        [EnumMember()]
        Private = 1,
    }
    
    [DataContract()]
    public enum Queue_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum Queue_IncomingEmailFilteringMethod {
        
        [EnumMember()]
        Allemailmessages = 0,
        
        [EnumMember()]
        EmailmessagesinresponsetoDynamics365email = 1,
        
        [EnumMember()]
        EmailmessagesfromDynamics365LeadsContactsandAccounts = 2,
        
        [EnumMember()]
        EmailmessagesfromDynamics365recordsthatareemailenabled = 3,
        
        [EnumMember()]
        Noemailmessages = 4,
    }
    
    [DataContract()]
    public enum Queue_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
}
